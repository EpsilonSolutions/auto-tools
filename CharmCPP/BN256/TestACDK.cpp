#include "TestACDK.h"

void Acdk12::setup(CharmList & gk)
{
    G1 GG1;
    G2 GG2;
    ZR C;
    G1 CG1;
    G2 CG2;
    ZR F;
    G1 FG1;
    G2 FG2;
    ZR U1;
    G1 U1G1;
    G2 U1G2;
    ZR U2;
    G1 U2G1;
    G2 U2G2;
    GG1 = group.random(G1_t);
    GG2 = group.random(G2_t);
    C = group.random(ZR_t);
    CG1 = group.exp(GG1, C);
    CG2 = group.exp(GG2, C);
    F = group.random(ZR_t);
    FG1 = group.exp(GG1, F);
    FG2 = group.exp(GG2, F);
    U1 = group.random(ZR_t);
    U1G1 = group.exp(GG1, U1);
    U1G2 = group.exp(GG2, U1);
    U2 = group.random(ZR_t);
    U2G1 = group.exp(GG1, U2);
    U2G2 = group.exp(GG2, U2);
    gk.insert(0, GG1);
    gk.insert(1, GG2);
    gk.insert(2, CG1);
    gk.insert(3, CG2);
    gk.insert(4, FG1);
    gk.insert(5, FG2);
    gk.insert(6, U1G1);
    gk.insert(7, U1G2);
    gk.insert(8, U2G1);
    gk.insert(9, U2G2);
    return;
}

void Acdk12::keygen(CharmList & gk, CharmList & sk, CharmList & svk, CharmList & vvk)
{
    G1 GG1;
    G2 GG2;
    G1 CG1;
    G2 CG2;
    G1 FG1;
    G2 FG2;
    G1 U1G1;
    G2 U1G2;
    G1 U2G1;
    G2 U2G2;
    G1 VG1;
    G2 VG2;
    G1 V1G1;
    G2 V1G2;
    G1 V2G1;
    G2 V2G2;
    G1 HG1;
    G2 HG2;
    ZR a1;
    ZR a2;
    ZR b;
    ZR alpha;
    ZR rho;
    G1 BG1;
    G2 BG2;
    G1 A1;
    G1 A2;
    G1 B1;
    G1 B2;
    G1 R1;
    G1 R2;
    G1 W1;
    G1 W2;
    G1 X1;
    G2 X2;
    G2 K1;
    G2 K2;
    
    GG1 = gk[0].getG1();
    GG2 = gk[1].getG2();
    CG1 = gk[2].getG1();
    CG2 = gk[3].getG2();
    FG1 = gk[4].getG1();
    FG2 = gk[5].getG2();
    U1G1 = gk[6].getG1();
    U1G2 = gk[7].getG2();
    U2G1 = gk[8].getG1();
    U2G2 = gk[9].getG2();
    VG1 = group.random(G1_t);
    VG2 = group.random(G2_t);
    V1G1 = group.random(G1_t);
    V1G2 = group.random(G2_t);
    V2G1 = group.random(G1_t);
    V2G2 = group.random(G2_t);
    HG1 = group.random(G1_t);
    HG2 = group.random(G2_t);
    a1 = group.random(ZR_t);
    a2 = group.random(ZR_t);
    b = group.random(ZR_t);
    alpha = group.random(ZR_t);
    rho = group.random(ZR_t);
    BG1 = group.exp(GG1, b);
    BG2 = group.exp(GG2, b);
    A1 = group.exp(GG1, a1);
    A2 = group.exp(GG1, a2);
    B1 = group.exp(BG1, a1);
    B2 = group.exp(BG1, a2);
    R1 = group.mul(VG1, group.exp(V1G1, a1));
    R2 = group.mul(VG1, group.exp(V2G1, a2));
    W1 = group.exp(R1, b);
    W2 = group.exp(R2, b);
    X1 = group.exp(GG1, rho);
    X2 = group.exp(GG2, group.div(group.mul(group.mul(alpha, a1), b), rho));
    K1 = group.exp(GG2, alpha);
    K2 = group.exp(K1, a1);
    svk.insert(0, BG1);
    svk.insert(1, BG2);
    svk.insert(2, HG2);
    svk.insert(3, R1);
    svk.insert(4, R2);
    svk.insert(5, V1G1);
    svk.insert(6, V1G2);
    svk.insert(7, V2G1);
    svk.insert(8, V2G2);
    svk.insert(9, VG1);
    svk.insert(10, VG2);
    vvk.insert(0, A1);
    vvk.insert(1, A2);
    vvk.insert(2, B1);
    vvk.insert(3, B2);
    vvk.insert(4, BG1);
    vvk.insert(5, HG1);
    vvk.insert(6, R1);
    vvk.insert(7, R2);
    vvk.insert(8, W1);
    vvk.insert(9, W2);
    vvk.insert(10, X1);
    vvk.insert(11, X2);
    sk.insert(0, K1);
    sk.insert(1, K2);
    return;
}

void Acdk12::sign(CharmList & gk, CharmList & svk, CharmList & sk, ZR & m1, ZR & m2, CharmList & M, CharmList & sig)
{
    G1 GG1;
    G2 GG2;
    G1 CG1;
    G2 CG2;
    G1 FG1;
    G2 FG2;
    G1 U1G1;
    G2 U1G2;
    G1 U2G1;
    G2 U2G2;
    G1 BG1;
    G2 BG2;
    G2 HG2;
    G1 R1;
    G1 R2;
    G1 V1G1;
    G2 V1G2;
    G1 V2G1;
    G2 V2G2;
    G1 VG1;
    G2 VG2;
    G2 K1;
    G2 K2;
    G1 M1;
    G1 M2;
    G1 M3;
    G1 M4;
    G1 M5G1;
    G2 M5G2;
    G1 M6G1;
    G2 M6G2;
    ZR r1;
    ZR r2;
    ZR z1;
    ZR z2;
    ZR r;
    G2 S0;
    G2 S1;
    G2 S2;
    G2 S3;
    G2 S4;
    G2 S5;
    G2 S6;
    G2 S7;
    
    GG1 = gk[0].getG1();
    GG2 = gk[1].getG2();
    CG1 = gk[2].getG1();
    CG2 = gk[3].getG2();
    FG1 = gk[4].getG1();
    FG2 = gk[5].getG2();
    U1G1 = gk[6].getG1();
    U1G2 = gk[7].getG2();
    U2G1 = gk[8].getG1();
    U2G2 = gk[9].getG2();
    
    BG1 = svk[0].getG1();
    BG2 = svk[1].getG2();
    HG2 = svk[2].getG2();
    R1 = svk[3].getG1();
    R2 = svk[4].getG1();
    V1G1 = svk[5].getG1();
    V1G2 = svk[6].getG2();
    V2G1 = svk[7].getG1();
    V2G2 = svk[8].getG2();
    VG1 = svk[9].getG1();
    VG2 = svk[10].getG2();
    
    K1 = sk[0].getG2();
    K2 = sk[1].getG2();
    M1 = group.exp(CG1, m1);
    M2 = group.exp(CG1, m2);
    M3 = group.exp(FG1, m1);
    M4 = group.exp(FG1, m2);
    M5G1 = group.exp(U1G1, m1);
    M5G2 = group.exp(U1G2, m1);
    M6G1 = group.exp(U2G1, m2);
    M6G2 = group.exp(U2G2, m2);
    r1 = group.random(ZR_t);
    r2 = group.random(ZR_t);
    z1 = group.random(ZR_t);
    z2 = group.random(ZR_t);
    r = group.add(r1, r2);
    S0 = group.exp(group.mul(group.mul(M5G2, M6G2), HG2), r1);
    S1 = group.mul(K2, group.exp(VG2, r));
    S2 = group.mul(group.mul(group.exp(K1, -1), group.exp(V1G2, r)), group.exp(GG2, z1));
    S3 = group.exp(BG2, group.neg(z1));
    S4 = group.mul(group.exp(V2G2, r), group.exp(GG2, z2));
    S5 = group.exp(BG2, group.neg(z2));
    S6 = group.exp(BG2, r2);
    S7 = group.exp(GG2, r1);
    M.insert(0, M1);
    M.insert(1, M2);
    M.insert(2, M3);
    M.insert(3, M4);
    M.insert(4, M5G1);
    M.insert(5, M5G2);
    M.insert(6, M6G1);
    M.insert(7, M6G2);
    sig.insert(0, S0);
    sig.insert(1, S1);
    sig.insert(2, S2);
    sig.insert(3, S3);
    sig.insert(4, S4);
    sig.insert(5, S5);
    sig.insert(6, S6);
    sig.insert(7, S7);
    return;
}

bool Acdk12::verify(CharmList & vvk, CharmList & M, CharmList & sig)
{
    G1 A1;
    G1 A2;
    G1 B1;
    G1 B2;
    G1 BG1;
    G1 HG1;
    G1 R1;
    G1 R2;
    G1 W1;
    G1 W2;
    G1 X1;
    G2 X2;
    G1 M1;
    G1 M2;
    G1 M3;
    G1 M4;
    G1 M5G1;
    G2 M5G2;
    G1 M6G1;
    G2 M6G2;
    G2 S0;
    G2 S1;
    G2 S2;
    G2 S3;
    G2 S4;
    G2 S5;
    G2 S6;
    G2 S7;
    
    A1 = vvk[0].getG1();
    A2 = vvk[1].getG1();
    B1 = vvk[2].getG1();
    B2 = vvk[3].getG1();
    BG1 = vvk[4].getG1();
    HG1 = vvk[5].getG1();
    R1 = vvk[6].getG1();
    R2 = vvk[7].getG1();
    W1 = vvk[8].getG1();
    W2 = vvk[9].getG1();
    X1 = vvk[10].getG1();
    X2 = vvk[11].getG2();
    
    M1 = M[0].getG1();
    M2 = M[1].getG1();
    M3 = M[2].getG1();
    M4 = M[3].getG1();
    M5G1 = M[4].getG1();
    M5G2 = M[5].getG2();
    M6G1 = M[6].getG1();
    M6G2 = M[7].getG2();
    
    S0 = sig[0].getG2();
    S1 = sig[1].getG2();
    S2 = sig[2].getG2();
    S3 = sig[3].getG2();
    S4 = sig[4].getG2();
    S5 = sig[5].getG2();
    S6 = sig[6].getG2();
    S7 = sig[7].getG2();
    if ( ( (( (( (( (( (( (( (group.pair(group.mul(M5G1, group.mul(M6G1, HG1)), S7)) == (group.pair(GG1, S0)) )) && (( (group.mul(group.pair(BG1, S1), group.mul(group.pair(B1, S2), group.pair(A1, S3)))) == (group.mul(group.pair(R1, S6), group.pair(W1, S7))) )) )) && (( (group.mul(group.mul(group.pair(BG1, S1), group.pair(B2, S4)), group.pair(A2, S5))) == (group.mul(group.mul(group.pair(R2, S6), group.pair(W2, S7)), group.pair(X1, X2))) )) )) && (( (group.pair(M1, FG2)) == (group.pair(M3, CG2)) )) )) && (( (group.pair(M2, FG2)) == (group.pair(M4, CG2)) )) )) && (( (group.pair(M1, U1G2)) == (group.pair(M5, CG2)) )) )) && (( (group.pair(M2, U2G2)) == (group.pair(M6, CG2)) )) ) )
    {
        return true;
    }
    else
    {
        return false;
    }
}

