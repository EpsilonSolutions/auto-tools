['bls.bv']
types  => {'M': 'str', 'pk#0': 'G2', 'pk#1': 'G2', 'sig': 'G1', 'h': 'G1'}
constant  => ['pk#1', 'pk#0']
variables => {'pk#0': 'G2', 'pk#1': 'G2', 'h': 'G1', 'M': 'str', 'N': '100', 'sig': 'G1'}
metadata => {'N': '100'}
batch algorithm => ['2', '3']

VERIFY EQUATION => verify := e(h,pk#0) == e(sig,pk#1)

Stage A: Combined Equation => verify := (prod{z := 1,N} on e(h_z,pk#0)) == (prod{z := 1,N} on e(sig_z,pk#1))

Stage B: Small Exp Test => verify := (prod{z := 1,N} on e(h_z,pk#0)^delta_z) == (prod{z := 1,N} on e(sig_z,pk#1)^delta_z) 

Rule 2: Left := Move 'delta_z' exponent into the pairing. Left := Move 'delta_z' exponent into the pairing.  

Applying technique 2 => : verify := (prod{z := 1,N} on e(h_z^delta_z,pk#0)) == (prod{z := 1,N} on e(sig_z^delta_z,pk#1)) 

Rule 3: common 1st (left) node appears, so can reduce n pairings to 1. common 1st (left) node appears, so can reduce n pairings to 1.  

Applying technique 3 => : verify := e((prod{z := 1,N} on h_z^delta_z),pk#0) == e((prod{z := 1,N} on sig_z^delta_z),pk#1) 

Instances found => {'sig_z': {'delta_z': 1}, 'h_z': {'delta_z': 1}} 

Final batch eq: e((prod{z := 1,N} on h_z^delta_z),pk#0) == e((prod{z := 1,N} on sig_z^delta_z),pk#1)
Final indiv eq: e(h_z,pk#0) == e(sig_z,pk#1) 

Result N = 100 : 28.8462078
Result N = 100 : 2.0922772
Threshold:  2
<====	PREP FOR CODE GEN	====>

Final version => e(dotA,pk#0) == e(dotB,pk#1) 

Compute:  dotA := (prod{z := 1,N} on h_z^delta_z)
Compute:  dotB := (prod{z := 1,N} on sig_z^delta_z)
Precompute: h := H(M,G1)
Precompute: delta := for{z := 1, N} do prng_z
dotA := G1
dotB := G1
