['chp.bv']
types  => {'pk': 'G2', 'b': 'ZR', 'sig': 'G1', 'M': 'str', 'mpk#0': 'G2'}
constant  => ['a', 'mpk#0', 'h']
variables => {'b': 'ZR', 'M': 'str', 'mpk#0': 'G2', 'N': '100', 'sig': 'G1', 'pk': 'G2'}
metadata => {'N': '100'}
batch algorithm => ['2', '3']

VERIFY EQUATION => verify := e(sig,mpk#0) == (e(a,pk) * e(h,pk)^b)

Stage A: Combined Equation => verify := (prod{z := 1,N} on e(sig_z,mpk#0)) == ((prod{z := 1,N} on e(a,pk_z)) * (prod{z := 1,N} on e(h,pk_z)^b_z))

Stage B: Small Exp Test => verify := (prod{z := 1,N} on e(sig_z,mpk#0)^delta_z) == ((prod{z := 1,N} on e(a,pk_z)^delta_z) * (prod{z := 1,N} on e(h,pk_z)^(b_z * delta_z))) 

Rule 2: Left := Move 'delta_z' exponent into the pairing. Right := Move 'delta_z' exponent into the pairing. Right := Move '(b_z * delta_z)' exponent into the pairing.  

Applying technique 2 => : verify := (prod{z := 1,N} on e(sig_z^delta_z,mpk#0)) == ((prod{z := 1,N} on e(a,pk_z^delta_z)) * (prod{z := 1,N} on e(h,pk_z^(b_z * delta_z)))) 

Rule 3: common 1st (left) node appears, so can reduce n pairings to 1. common 2nd (right) node appears, so can reduce n pairings to 1. common 2nd (right) node appears, so can reduce n pairings to 1.  

Applying technique 3 => : verify := e((prod{z := 1,N} on sig_z^delta_z),mpk#0) == (e(a,(prod{z := 1,N} on pk_z^delta_z)) * e(h,(prod{z := 1,N} on pk_z^(b_z * delta_z)))) 

Instances found => {'sig_z': {'delta_z': 1}, 'pk_z': {'b_z': 1, 'delta_z': 2}} 

Final batch eq: e((prod{z := 1,N} on sig_z^delta_z),mpk#0) == (e(a,(prod{z := 1,N} on preA_z)) * e(h,(prod{z := 1,N} on preA_z^b_z)))
Final indiv eq: e(sig_z,mpk#0) == (e(a,pk_z) * e(h,pk_z)^b_z) 

Result N = 100 : 47.9777956
Result N = 100 : 21.9949247
Threshold:  2
<====	PREP FOR CODE GEN	====>

Final version => e(dotA,mpk#0) == (e(a,dotB) * e(h,dotC)) 

Compute:  dotA := (prod{z := 1,N} on sig_z^delta_z)
Compute:  dotB := (prod{z := 1,N} on preA_z)
Compute:  dotC := (prod{z := 1,N} on preA_z^b_z)
Precompute: h := H(t2,G1)
Precompute: delta := for{z := 1, N} do prng_z
Precompute: preA_z := pk_z^delta_z
Precompute: a := H(t1,G1)
Precompute: b := H(M | t3,ZR)
dotA := G1
dotB := G2
dotC := G2
