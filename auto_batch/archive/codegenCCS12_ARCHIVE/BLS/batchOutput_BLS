['bls.bv', '-c']
types  => {'M': 'str', 'h': 'G1', 'sig': 'G1', 'g': 'G2', 'pk': 'G2'}
constant  => ['g']
public  => ['pk']
signature  => ['sig']
message  => ['h']
variables => {'name': 'bls', 'g': 'G2', 'h': 'G1', 'M': 'str', 'N': '100', 'S': '10', 'sig': 'G1', 'pk': 'G2'}
metadata => {'S': '10', 'name': 'bls', 'N': '100'}

VERIFY EQUATION => verify := e(h,pk) == e(sig,g)
Mode:  single signer

Stage A: Combined Equation => verify := (prod{z := 1,N} on e(h_z,pk)) == (prod{z := 1,N} on e(sig_z,g))

Stage B: Small Exp Test => verify := (prod{z := 1,N} on e(h_z,pk)^delta_z) == (prod{z := 1,N} on e(sig_z,g)^delta_z) 

unique path: 0 , time: 0.686508 , path:  [2, 3]
unique path: 1 , time: 15.87699 , path:  [2]
found batch algorithm => ['2', '3']
Move the exponent(s) into the pairing (technique 2) 

Applying technique 2 : (prod{z := 1,N} on e(h_z^delta_z,pk)) == (prod{z := 1,N} on e(sig_z^delta_z,g)) 

Combine pairings with common 1st or 2nd element. Reduce N pairings to 1 (technique 3) 

Applying technique 3 : e((prod{z := 1,N} on h_z^delta_z),pk) == e((prod{z := 1,N} on sig_z^delta_z),g) 

Final batch eq: e((prod{z := 1,N} on h_z^delta_z),pk#0?) == e((prod{z := 1,N} on sig_z^delta_z),pk#1?)
<====	PREP FOR CODE GEN	====>

Final version => e(dotA,pk#0?) == e(dotB,pk#1?) 

Compute:  dotA := (prod{z := 0,N} on h_z^delta_z)
Compute:  dotB := (prod{z := 0,N} on sig_z^delta_z)
Precompute: h_z := H(M_z,G1)
Precompute: delta := for{z := 0, N} do prng_z
dotA := G1
dotB := G1
Sort := pk#0?
