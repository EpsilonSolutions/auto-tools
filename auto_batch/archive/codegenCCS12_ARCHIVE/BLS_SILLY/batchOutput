['/Users/matt/Documents/charm/auto_batch/codegen/BLS_SILLY/case3.bv', '-c']
types  => {'g': 'G2', 'h': 'G1', 'M': 'str', 'sig': 'G1', 't': 'ZR', 'pk': 'G2'}
constant  => ['g']
public  => ['pk']
signature  => ['sig', 't']
message  => ['h']
variables => {'name': 'bls', 'g': 'G2', 'h': 'G1', 'M': 'str', 'N': '100', 'S': '10', 'sig': 'G1', 't': 'ZR', 'pk': 'G2'}
metadata => {'S': '10', 'name': 'bls', 'N': '100'}

VERIFY EQUATION => verify := e(h,pk)^t == e(sig,g^t)
Mode:  single signer

Stage A: Combined Equation => verify := (prod{z := 0,N} on e(h_z,pk)^t_z) == (prod{z := 0,N} on e(sig_z,g^t_z))

Stage B: Small Exp Test => verify := (prod{z := 0,N} on e(h_z,pk)^(t_z * delta_z)) == (prod{z := 0,N} on e(sig_z,g^t_z)^delta_z) 

found batch algorithm => ['2', '3']
Move the exponent(s) into the pairing (technique 2) 

Applying technique 2 : (prod{z := 0,N} on e(h_z^(t_z * delta_z),pk)) == (prod{z := 0,N} on e(sig_z^delta_z,g^t_z)) 

Move dot products inside pairings to reduce N pairings to 1 (technique 3) 

Applying technique 3 : e((prod{z := 0,N} on h_z^(t_z * delta_z)),pk) == e((prod{z := 0,N} on sig_z^(delta_z * t_z)),g) 

Final batch eq: e((prod{z := 0,N} on h_z^(t_z * delta_z)),pk) == e((prod{z := 0,N} on sig_z^(delta_z * t_z)),g)
<====	PREP FOR CODE GEN	====>

Final version => e(dotA,pk#0) == e(dotB,pk#1) 

Compute:  dotA := (prod{z := 0,N} on h_z^(t_z * delta_z))
Compute:  dotB := (prod{z := 0,N} on sig_z^(delta_z * t_z))
Precompute: h_z := H(M_z,G1)
Precompute: delta := for{z := 1, N} do prng_z
dotA := G1
dotB := G1
Sort := pk#0
