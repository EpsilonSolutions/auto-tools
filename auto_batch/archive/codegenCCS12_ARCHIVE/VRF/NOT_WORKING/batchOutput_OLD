Final batch eq: (e((prod{z := 0,N} on (pk#3?^((1 + -x#1?_z) * delta_z) * pk#0#0?^(x#1?_z * delta_z))),pk#2?) * e((prod{z := 0,N} on pi#1?_z^-delta_z),pk#4?)) == group.init(GT, 1)
<====	PREP FOR CODE GEN	====>

Final version => (e(dotA,pk#2?) * e(dotB,pk#4?)) == group.init(GT, 1) 

Compute:  dotA := (prod{z := 0,N} on (pk#3?^((1 + -x#1?_z) * delta_z) * pk#0#0?^(x#1?_z * delta_z)))
Compute:  dotB := (prod{z := 0,N} on pi#1?_z^-delta_z)
Precompute: delta := for{z := 0, N} do prng_z
dotA := G1
dotB := G1







Final batch eq: (e((prod{z := 0,N} on pi#n?_z^delta_z),pk#1#0?) * e((prod{z := 0,N} on pi#0?_z^-delta_z),(pk#4? * pk#5?^-1))) == (prod{z := 0,N} on y_z^delta_z)
<====	PREP FOR CODE GEN	====>

Final version => (e(dotC,pk#1#0?) * e(dotD,(pk#4? * pk#5?^-1))) == dotE 

Compute:  dotC := (prod{z := 0,N} on pi#n?_z^delta_z)
Compute:  dotD := (prod{z := 0,N} on pi#0?_z^-delta_z)
Compute:  dotE := (prod{z := 0,N} on y_z^delta_z)
Precompute: delta := for{z := 0, N} do prng_z
dotC := G1
dotD := G1
dotE := GT







Final batch eq: for{t := 1,n} do e((prod{z := 0,N} on (pi#t?_z^delta_z * pi#t-1?_z^((1 + -x#t?_z) * -delta_z))),pk#4?) == e((prod{z := 0,N} on pi#t-1?_z^(x#t?_z * delta_z)),pk#1#t?)
<====	PREP FOR CODE GEN	====>

Final version => for{t := 1,n} do e(dotF,pk#4?) == e(dotG,pk#1#t?) 

Compute:  dotF := (prod{z := 0,N} on (pi#t?_z^delta_z * pi#t-1?_z^((1 + -x#t?_z) * -delta_z)))
Compute:  dotG := (prod{z := 0,N} on pi#t-1?_z^(x#t?_z * delta_z))
Precompute: delta := for{z := 0, N} do prng_z
dotF := G1
dotG := G1
