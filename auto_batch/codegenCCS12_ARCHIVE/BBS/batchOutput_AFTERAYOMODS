['tests/bbs.bv', '-c']
types  => {'c': 'ZR', 'sx': 'ZR', 'g2': 'G2', 'g1': 'G1', 'R3': 'GT', 'sgamma1': 'ZR', 'h': 'G1', 'T2': 'G1', 'sgamma2': 'ZR', 'M': 'str', 'T3': 'G1', 'T1': 'G1', 'salpha': 'ZR', 'u': 'G1', 'w': 'G2', 'v': 'G1', 'sbeta': 'ZR'}
constant  => ['g1', 'g2', 'h', 'u', 'v', 'w']
public  => ['h', 'u', 'v', 'w']
signature  => ['T1', 'T2', 'T3', 'R3', 'c', 'salpha', 'sbeta', 'sx', 'sgamma1', 'sgamma2']
message  => ['M']
variables => {'c': 'ZR', 'sx': 'ZR', 'g2': 'G2', 'g1': 'G1', 'R3': 'GT', 'sgamma1': 'ZR', 'h': 'G1', 'T2': 'G1', 'sgamma2': 'ZR', 'M': 'str', 'T3': 'G1', 'T1': 'G1', 'salpha': 'ZR', 'u': 'G1', 'w': 'G2', 'v': 'G1', 'N': '100', 'sbeta': 'ZR', 'name': 'bbs'}
metadata => {'name': 'bbs', 'N': '100'}

VERIFY EQUATION => verify := (e(T3,g2)^sx * (e(h,w)^(-salpha + -sbeta) * (e(h,g2)^(-sgamma1 + -sgamma2) * (e(T3,w)^c * e(g1,g2)^-c)))) == R3
Mode:  single signer

Stage A: Combined Equation => verify := (prod{z := 0,N} on (e(T3_z,g2)^sx_z * (e(h,w)^(-salpha_z + -sbeta_z) * (e(h,g2)^(-sgamma1_z + -sgamma2_z) * (e(T3_z,w)^c_z * e(g1,g2)^-c_z))))) == (prod{z := 0,N} on R3_z)

Stage B: Small Exp Test => verify := (prod{z := 0,N} on (e(T3_z,g2)^sx_z * (e(h,w)^(-salpha_z + -sbeta_z) * (e(h,g2)^(-sgamma1_z + -sgamma2_z) * (e(T3_z,w)^c_z * e(g1,g2)^-c_z))))^delta_z) == (prod{z := 0,N} on R3_z^delta_z) 

found batch algorithm => ['2', '6', '6', '5', '3']
Move the exponent(s) into the pairing (technique 2) 

Applying technique 2 : (prod{z := 0,N} on (e(T3_z^(sx_z * delta_z),g2) * (e(h^((-salpha_z + -sbeta_z) * delta_z),w) * (e(h^((-sgamma1_z + -sgamma2_z) * delta_z),g2) * (e(T3_z^(c_z * delta_z),w) * e(g1^(-c_z * delta_z),g2)))))) == (prod{z := 0,N} on R3_z^delta_z) 

Merge pairings with common first or second element (technique 6) 

Combine Pairings: : (prod{z := 0,N} on (e((T3_z^(sx_z * delta_z) * (h^((-sgamma1_z + -sgamma2_z) * delta_z) * g1^(-c_z * delta_z))),g2) * (e(h^((-salpha_z + -sbeta_z) * delta_z),w) * e(T3_z^(c_z * delta_z),w)))) == (prod{z := 0,N} on R3_z^delta_z) 

Merge pairings with common first or second element (technique 6) 

Combine Pairings: : (prod{z := 0,N} on (e((T3_z^(sx_z * delta_z) * (h^((-sgamma1_z + -sgamma2_z) * delta_z) * g1^(-c_z * delta_z))),g2) * e((h^((-salpha_z + -sbeta_z) * delta_z) * T3_z^(c_z * delta_z)),w))) == (prod{z := 0,N} on R3_z^delta_z) 

Distribute dot products (technique 5):  

Simplifying => : ((prod{z := 0,N} on e((T3_z^(sx_z * delta_z) * (h^((-sgamma1_z + -sgamma2_z) * delta_z) * g1^(-c_z * delta_z))),g2)) * (prod{z := 0,N} on e((h^((-salpha_z + -sbeta_z) * delta_z) * T3_z^(c_z * delta_z)),w))) == (prod{z := 0,N} on R3_z^delta_z) 

Move dot products inside pairings to reduce N pairings to 1 (technique 3) 

Applying technique 3 : (e((prod{z := 0,N} on (T3_z^(sx_z * delta_z) * (h^((-sgamma1_z + -sgamma2_z) * delta_z) * g1^(-c_z * delta_z)))),g2) * e((prod{z := 0,N} on (h^((-salpha_z + -sbeta_z) * delta_z) * T3_z^(c_z * delta_z))),w)) == (prod{z := 0,N} on R3_z^delta_z) 

Final batch eq: (e((prod{z := 0,N} on (T3_z^(sx_z * delta_z) * (h^((-sgamma1_z + -sgamma2_z) * delta_z) * g1^(-c_z * delta_z)))),g2) * e((prod{z := 0,N} on (h^((-salpha_z + -sbeta_z) * delta_z) * T3_z^(c_z * delta_z))),w)) == (prod{z := 0,N} on R3_z^delta_z)
<====	PREP FOR CODE GEN	====>

Final version => (e(dotA,gpk#1?) * e(dotB,gpk#5?)) == dotC 

Compute:  dotA := (prod{z := 0,N} on (T3_z^(sx_z * delta_z) * (gpk#2?^((-sgamma1_z + -sgamma2_z) * delta_z) * gpk#0?^(-c_z * delta_z))))
Compute:  dotB := (prod{z := 0,N} on (gpk#2?^((-salpha_z + -sbeta_z) * delta_z) * T3_z^(c_z * delta_z)))
Compute:  dotC := (prod{z := 0,N} on R3_z^delta_z)
Precompute: R4_z := T1^sx
Precompute: delta := for{z := 1, N} do prng_z
Precompute: R1_z := u^(salpha * T1^-c)
Precompute: R5_z := T2^(sx * v^sgamma2)
Precompute: R2_z := v^(sbeta * T2^-c)
dotA := G1
dotB := G1
dotC := GT
Sort := gpk#0?
