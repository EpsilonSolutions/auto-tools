['boyen.bv', '-c']
types  => {'D': 'GT', 'M': 'ZR', 'Bt': 'G2', 'S': 'G1', 't': 'ZR', 'At': 'G2', 'Ct': 'G2'}
constant  => ['At', 'Bt', 'Ct']
public  => ['At', 'Bt', 'Ct']
signature  => ['S', 't']
message  => ['M']
variables => {'D': 'GT', 'M': 'ZR', 'l': '2', 'N': '100', 'Bt': 'G2', 'S': 'G1', 't': 'ZR', 'At': 'G2', 'Ct': 'G2'}
metadata => {'l': '2', 'N': '100'}

VERIFY EQUATION => verify := (prod{y := 1,l} on e(S_y,(At_y * (Bt_y^M_y * Ct_y^t_y)))) == D

Stage A: Combined Equation => verify := (prod{z := 1,N} on (prod{y := 1,l} on e(S_y%z,(At_y * (Bt_y^M_y%z * Ct_y^t_y%z))))) == (prod{z := 1,N} on D)

Stage B: Small Exp Test => verify := (prod{z := 1,N} on (prod{y := 1,l} on e(S_y%z,(At_y * (Bt_y^M_y%z * Ct_y^t_y%z))))^delta_z) == (prod{z := 1,N} on D^delta_z) 

unique path: 0 , time: 37.0520262 , path:  [2]
unique path: 1 , time: 67.6685462 , path:  [2, 4, 3]
unique path: 2 , time: 3.7351325999999996 , path:  [2, 4, 3, 5, 3]
unique path: 3 , time: 3.7361087999999993 , path:  [2, 4, 3, 5, 3, 5]
unique path: 4 , time: 67.57287860000001 , path:  [2, 4, 3, 5]
unique path: 5 , time: 37.0520262 , path:  [2, 4]
found batch algorithm => ['2', '4', '3', '5', '3']
Move the exponent(s) into the pairing (technique 2) 

Applying technique 2 : (prod{z := 1,N} on (prod{y := 1,l} on e(S_y%z,(At_y^delta_z * (Bt_y^(M_y%z * delta_z) * Ct_y^(t_y%z * delta_z)))))) == (prod{z := 1,N} on D^delta_z) 

Applied waters hash technique (technique 4) 

Applying technique 4 : (prod{y := 1,l} on (prod{z := 1,N} on e(S_y%z,(At_y^delta_z * (Bt_y^(M_y%z * delta_z) * Ct_y^(t_y%z * delta_z)))))) == (prod{z := 1,N} on D^delta_z) 

Combine pairings with common 1st or 2nd element. Reduce N pairings to 1 (technique 3) 

Applying technique 3 : (prod{y := 1,l} on (prod{z := 1,N} on (e(S_y%z,At_y^delta_z) * (e(S_y%z,Bt_y^(M_y%z * delta_z)) * e(S_y%z,Ct_y^(t_y%z * delta_z)))))) == (prod{z := 1,N} on D^delta_z) 

Distribute dot products:  

Simplifying => : (prod{y := 1,l} on ((prod{z := 1,N} on e(S_y%z,At_y^delta_z)) * ((prod{z := 1,N} on e(S_y%z,Bt_y^(M_y%z * delta_z))) * (prod{z := 1,N} on e(S_y%z,Ct_y^(t_y%z * delta_z)))))) == (prod{z := 1,N} on D^delta_z) 

Combine pairings with common 1st or 2nd element. Reduce N pairings to 1 (technique 3) 

Applying technique 3 : (prod{y := 1,l} on (e((prod{z := 1,N} on S_y%z^delta_z),At_y) * (e((prod{z := 1,N} on S_y%z^(M_y%z * delta_z)),Bt_y) * e((prod{z := 1,N} on S_y%z^(t_y%z * delta_z)),Ct_y)))) == (prod{z := 1,N} on D^delta_z) 

Final batch eq: (prod{y := 1,l} on (e((prod{z := 1,N} on S_y%z^delta_z),At_y) * (e((prod{z := 1,N} on S_y%z^(M_y%z * delta_z)),Bt_y) * e((prod{z := 1,N} on S_y%z^(t_y%z * delta_z)),Ct_y)))) == (prod{z := 1,N} on D^delta_z)
<====	PREP FOR CODE GEN	====>

Final version => dotE == dotD 

Compute:  dotA := (prod{z := 0,N} on S_y%z^delta_z)
Compute:  dotB := (prod{z := 0,N} on S_y%z^(m_y%z * delta_z))
Compute:  dotC := (prod{z := 0,N} on S_y%z^(t_y%z * delta_z))
Compute:  dotD := (prod{z := 0,N} on D^delta_z)
Compute:  dotE := (prod{y := 0,l} on (e(dotA,At_y) * (e(dotB,Bt_y) * e(dotC,Ct_y))))
Precompute: D := e(g1,g2)
Precompute: delta := for{z := 1, N} do prng_z
dotA := G1
dotB := G1
dotC := G1
dotD := GT
dotE := GT
List := At in y
List := Bt in y
List := Ct in y
List := S in y
List := t in y
Sort := mpk#0
