from toolbox.PKSig import PKSig
from toolbox.pairinggroup import *
import sys
from toolbox.pairinggroup import *
from ver_CHCH import verifySigsRecursive

group = None
debug = None
H1 = None
H2 = None
bodyKey = 'Body'

def prng_bits(bits=80):
	return group.init(ZR, randomBits(bits))

def __init__( groupObj ) : 
	global group , debug 
	group = groupObj 
	debug = False 

def run_Batch(verifyArgsDict, groupObjParam, verifyFuncArgs):
	global group
	global debug, H1, H2
	group = groupObjParam

	N = len(verifyArgsDict)
	delta = {}
	for z in range(0, N):
		delta[z] = prng_bits(80)

	incorrectIndices = []
	H1 = lambda x: group.hash(x, G1)
	H2 = lambda x,y: group.hash((x,y), ZR)
	__init__(group)


	for z in range(0, N):
		#for arg in verifyFuncArgs:
			#if (group.ismember(verifyArgsDict[z][arg][bodyKey]) == False):
				#sys.exit("ALERT:  Group membership check failed!!!!\n")

		pass

	dotA = {}
	dotB = {}

	for z in range(0, N):
		( S1 , S2 ) = verifyArgsDict[z]['sig'][bodyKey][ 'S1' ] , verifyArgsDict[z]['sig'][bodyKey][ 'S2' ]
		a = H2( verifyArgsDict[z]['M'][bodyKey] , S1 )

		dotA[z] =   S2 ** delta [ z ]  
		dotB[z] =  ( S1 * verifyArgsDict[z]['pk'][bodyKey] ** a ) ** delta [ z ]  

	verifySigsRecursive(verifyArgsDict, group, incorrectIndices, 0, N, dotA, dotB, delta)

	return incorrectIndices
