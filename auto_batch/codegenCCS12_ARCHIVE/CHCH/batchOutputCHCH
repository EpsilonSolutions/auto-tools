['chch.bv', '-c']
types  => {'a': 'ZR', 'g2': 'G2', 'S2': 'G1', 'S1': 'G1', 'M': 'str', 'P': 'G2', 'pk': 'G1'}
constant  => ['P', 'g2']
public  => ['pk']
signature  => ['S1', 'S2']
message  => ['a']
latex => {'S2': 'S_2', 'S1': 'S_1', 'g2': 'g_2', 'P': 'P_{pub}'}
variables => {'a': 'ZR', 'g2': 'G2', 'S2': 'G1', 'S1': 'G1', 'M': 'str', 'N': '100', 'P': 'G2', 'pk': 'G1', 'name': 'chch'}
metadata => {'name': 'chch', 'N': '100'}

VERIFY EQUATION => verify := e(S2,g2) == e((S1 * pk^a),P)
Mode: multi signer

Stage A: Combined Equation => verify := (prod{z := 1,N} on e(S2_z,g2)) == (prod{z := 1,N} on e((S1_z * pk_z^a_z),P))

Stage B: Small Exp Test => verify := (prod{z := 1,N} on e(S2_z,g2)^delta_z) == (prod{z := 1,N} on e((S1_z * pk_z^a_z),P)^delta_z) 

unique path: 0 , time: 1.217288 , path:  [2, 3, 2]
unique path: 1 , time: 1.217288 , path:  [2, 3]
unique path: 2 , time: 16.407769999999996 , path:  [2]
found batch algorithm => ['2', '3']
Move the exponent(s) into the pairing (technique 2) 

Applying technique 2 : (prod{z := 1,N} on e(S2_z^delta_z,g2)) == (prod{z := 1,N} on e((S1_z * pk_z^a_z)^delta_z,P)) 

Combine pairings with common 1st or 2nd element. Reduce N pairings to 1 (technique 3) 

Applying technique 3 : e((prod{z := 1,N} on S2_z^delta_z),g2) == e((prod{z := 1,N} on (S1_z * pk_z^a_z)^delta_z),P) 

Final batch eq: e((prod{z := 1,N} on S2_z^delta_z),g2) == e((prod{z := 1,N} on (S1_z * pk_z^a_z)^delta_z),P)
<====	PREP FOR CODE GEN	====>

Final version => e(dotA,mpk#1) == e(dotB,mpk#0) 

Compute:  dotA := (prod{z := 0,N} on S2_z^delta_z)
Compute:  dotB := (prod{z := 0,N} on (S1_z * pk_z^a_z)^delta_z)
Precompute: a_z := H(M_z | S1_z,ZR)
Precompute: delta := for{z := 1, N} do prng_z
dotA := G1
dotB := G1
Sort := mpk#0
