['chp.bv', '-c']
types  => {'pk': 'G2', 'b': 'ZR', 'sig': 'G1', 'M': 'str', 'g2': 'G2'}
constant  => ['a', 'g2', 'h']
public  => ['pk']
signature  => ['sig', 'b']
message  => ['h']
variables => {'b': 'ZR', 'g2': 'G2', 'M': 'str', 'N': '100', 'S': '100', 'sig': 'G1', 'pk': 'G2', 'name': 'chp'}
metadata => {'S': '100', 'name': 'chp', 'N': '100'}

VERIFY EQUATION => verify := e(sig,g2) == (e(a,pk) * e(h,pk)^b)
Mode: multi signer

Stage A: Combined Equation => verify := (prod{z := 0,N} on e(sig_z,g2)) == ((prod{z := 0,N} on e(a,pk_z)) * (prod{z := 0,N} on e(h,pk_z)^b_z))

Stage B: Small Exp Test => verify := (prod{z := 0,N} on e(sig_z,g2)^delta_z) == ((prod{z := 0,N} on e(a,pk_z)^delta_z) * (prod{z := 0,N} on e(h,pk_z)^(b_z * delta_z))) 

found batch algorithm => ['2', '3']
Move the exponent(s) into the pairing (technique 2) 

Applying technique 2 : (prod{z := 0,N} on e(sig_z^delta_z,g2)) == ((prod{z := 0,N} on e(a,pk_z^delta_z)) * (prod{z := 0,N} on e(h,pk_z^(b_z * delta_z)))) 

Combine pairings with common 1st or 2nd element. Reduce N pairings to 1 (technique 3) 

Applying technique 3 : e((prod{z := 0,N} on sig_z^delta_z),g2) == (e(a,(prod{z := 0,N} on pk_z^delta_z)) * e(h,(prod{z := 0,N} on pk_z^(b_z * delta_z)))) 

Final batch eq: e((prod{z := 0,N} on sig_z^delta_z),g2) == (e(a,(prod{z := 0,N} on pk_z^delta_z)) * e(h,(prod{z := 0,N} on pk_z^(b_z * delta_z))))
<====	PREP FOR CODE GEN	====>

Final version => e(dotA,mpk#0) == (e(a,dotB) * e(h,dotC)) 

Compute:  dotA := (prod{z := 0,N} on sig_z^delta_z)
Compute:  dotB := (prod{z := 0,N} on pk_z^delta_z)
Compute:  dotC := (prod{z := 0,N} on pk_z^(b_z * delta_z))
Precompute: a := H(t1,G1)
Precompute: delta := for{z := 1, N} do prng_z
Precompute: h := H(t2,G1)
Precompute: b_z := H(M | t3,ZR)
dotA := G1
dotB := G2
dotC := G2
Sort := mpk#0
