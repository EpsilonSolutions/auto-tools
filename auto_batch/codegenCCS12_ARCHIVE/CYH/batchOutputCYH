['cyh.bv', '-c']
types  => {'g': 'G2', 'h': 'ZR', 'sk': 'G1', 'S': 'G1', 'r': 'ZR', 'u': 'G1', 'pk': 'G1'}
constant  => ['P', 'g']
public  => ['pk']
signature  => ['S', 'u']
message  => ['h']
variables => {'name': 'cyh', 'g': 'G2', 'h': 'ZR', 'l': '10', 'N': '100', 'sk': 'G1', 'S': 'G1', 'r': 'ZR', 'u': 'G1', 'pk': 'G1'}
metadata => {'l': '10', 'name': 'cyh', 'N': '100'}

VERIFY EQUATION => verify := e((prod{y := 1,l} on (u_y * pk_y^h_y)),P) == e(S,g)
Mode:  single signer

Stage A: Combined Equation => verify := (prod{z := 1,N} on e((prod{y := 1,l} on (u_y%z * pk_y^h_y%z)),P)) == (prod{z := 1,N} on e(S_z,g))

Stage B: Small Exp Test => verify := (prod{z := 1,N} on e((prod{y := 1,l} on (u_y%z * pk_y^h_y%z)),P)^delta_z) == (prod{z := 1,N} on e(S_z,g)^delta_z) 

unique path: 0 , time: 8.368694 , path:  [2, 3, 2]
unique path: 1 , time: 5.994629 , path:  [2, 3]
unique path: 2 , time: 21.185110999999996 , path:  [2]
unique path: 3 , time: 9.059585 , path:  [2, 4, 3, 2]
unique path: 4 , time: 6.448113500000001 , path:  [2, 4, 3]
unique path: 5 , time: 14.0433545 , path:  [2, 4]
found batch algorithm => ['2', '3']
Move the exponent(s) into the pairing (technique 2) 

Applying technique 2 : (prod{z := 1,N} on e((prod{y := 1,l} on (u_y%z * pk_y^h_y%z))^delta_z,P)) == (prod{z := 1,N} on e(S_z^delta_z,g)) 

Combine pairings with common 1st or 2nd element. Reduce N pairings to 1 (technique 3) 

Applying technique 3 : e((prod{z := 1,N} on (prod{y := 1,l} on (u_y%z * pk_y^h_y%z))^delta_z),P) == e((prod{z := 1,N} on S_z^delta_z),g) 

Final batch eq: e((prod{z := 1,N} on (prod{y := 1,l} on (u_y%z * pk_y^h_y%z))^delta_z),P) == e((prod{z := 1,N} on S_z^delta_z),g)
<====	PREP FOR CODE GEN	====>

Final version => e(dotB,mpk#0) == e(dotC,mpk#1) 

Compute:  dotA := (prod{y := 0,l} on (u_y%z * pk_y^h_y%z))
Compute:  dotB := (prod{z := 0,N} on dotA^delta_z)
Compute:  dotC := (prod{z := 0,N} on S_z^delta_z)
Precompute: h_z := H(M | L | u_z,ZR)
Precompute: delta := for{z := 1, N} do prng_z
dotA := G1
dotB := G1
dotC := G1
List := u in y
List := h in y
List := pk in y
Sort := mpk#0
