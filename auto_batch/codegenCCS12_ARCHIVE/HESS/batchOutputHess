['hess.bv', '-c']
types  => {'a': 'ZR', 'h': 'G1', 'S1': 'GT', 's': 'ZR', 'S2': 'G1', 'pk': 'G1'}
constant  => ['P', 'g2']
public  => ['pk']
signature  => ['S1', 'S2', 'S3']
message  => ['a']
latex => {'S2': 'S_2', 'S1': 'S_1', 'g2': 'g_2', 'P': 'P_{pub}'}
variables => {'a': 'ZR', 'name': 'hess', 'h': 'G1', 'S1': 'GT', 'N': '100', 's': 'ZR', 'S2': 'G1', 'pk': 'G1'}
metadata => {'name': 'hess', 'N': '100'}

VERIFY EQUATION => verify := e(S2,g2) == (e(pk,P)^a * S1)
Mode: multi signer

Stage A: Combined Equation => verify := (prod{z := 1,N} on e(S2_z,g2)) == ((prod{z := 1,N} on e(pk_z,P)^a_z) * (prod{z := 1,N} on S1_z))

Stage B: Small Exp Test => verify := (prod{z := 1,N} on e(S2_z,g2)^delta_z) == ((prod{z := 1,N} on e(pk_z,P)^(a_z * delta_z)) * (prod{z := 1,N} on S1_z^delta_z)) 

unique path: 0 , time: 1.5779511 , path:  [2, 3]
unique path: 1 , time: 16.7684331 , path:  [2]
found batch algorithm => ['2', '3']
Move the exponent(s) into the pairing (technique 2) 

Applying technique 2 : (prod{z := 1,N} on e(S2_z^delta_z,g2)) == ((prod{z := 1,N} on e(pk_z^(a_z * delta_z),P)) * (prod{z := 1,N} on S1_z^delta_z)) 

Combine pairings with common 1st or 2nd element. Reduce N pairings to 1 (technique 3) 

Applying technique 3 : e((prod{z := 1,N} on S2_z^delta_z),g2) == (e((prod{z := 1,N} on pk_z^(a_z * delta_z)),P) * (prod{z := 1,N} on S1_z^delta_z)) 

Final batch eq: e((prod{z := 1,N} on S2_z^delta_z),g2) == (e((prod{z := 1,N} on pk_z^(a_z * delta_z)),P) * (prod{z := 1,N} on S1_z^delta_z))
<====	PREP FOR CODE GEN	====>

Final version => e(dotA,mpk#1) == (e(dotB,mpk#0) * dotC) 

Compute:  dotA := (prod{z := 0,N} on S2_z^delta_z)
Compute:  dotB := (prod{z := 0,N} on pk_z^(a_z * delta_z))
Compute:  dotC := (prod{z := 0,N} on S1_z^delta_z)
Precompute: a_z := H(M_z | S1_z,ZR)
Precompute: delta := for{z := 1, N} do prng_z
dotA := G1
dotB := G1
dotC := GT
Sort := mpk#0
