['waters.bv', '-c']
types  => {'A': 'GT', 'u2b': 'G2', 'S3': 'G1', 'S2': 'G1', 'S1': 'G1', 'u1b': 'G2', 'alpha': 'ZR', 'ub': 'G2'}
constant  => ['A', 'g2', 'ub', 'u1b', 'u2b']
public  => ['k']
signature  => ['S1', 'S2', 'S3']
message  => ['m']
latex => {'g2': 'g_2', 'u2b': '\\hat{u_2\\prime}', 'S3': 'S_3', 'S2': 'S_2', 'S1': 'S_1', 'u1b': '\\hat{u_1\\prime}', 'ub': '\\hat{u}'}
variables => {'A': 'GT', 'name': 'waters', 'u2b': 'G2', 'S3': 'G1', 'S2': 'G1', 'S1': 'G1', 'u1b': 'G2', 'l': '5', 'N': '100', 'alpha': 'ZR', 'ub': 'G2'}
metadata => {'l': '5', 'name': 'waters', 'N': '100'}

VERIFY EQUATION => verify := (e(S1,g2) * (e(S2,(u1b * (prod{y := 1,l} on ub_y^k_y))) * e(S3,(u2b * (prod{y := 1,l} on ub_y^m_y))))) == A
Mode: multi signer

Stage A: Combined Equation => verify := ((prod{z := 1,N} on e(S1_z,g2)) * ((prod{z := 1,N} on e(S2_z,(u1b * (prod{y := 1,l} on ub_y^k_y%z)))) * (prod{z := 1,N} on e(S3_z,(u2b * (prod{y := 1,l} on ub_y^m_y%z)))))) == (prod{z := 1,N} on A)

Stage B: Small Exp Test => verify := ((prod{z := 1,N} on e(S1_z,g2)^delta_z) * ((prod{z := 1,N} on e(S2_z,(u1b * (prod{y := 1,l} on ub_y^k_y%z)))^delta_z) * (prod{z := 1,N} on e(S3_z,(u2b * (prod{y := 1,l} on ub_y^m_y%z)))^delta_z))) == (prod{z := 1,N} on A^delta_z) 

unique path: 0 , time: 74.19373540000001 , path:  [2, 3]
unique path: 1 , time: 59.0042296 , path:  [2, 3, 5, 3]
unique path: 2 , time: 7.092872600000001 , path:  [2, 3, 5, 3, 4]
unique path: 3 , time: 6.721489 , path:  [2, 3, 5, 3, 4, 6]
unique path: 4 , time: 7.092872600000001 , path:  [2, 3, 5, 4, 3]
unique path: 5 , time: 22.2833546 , path:  [2, 3, 5, 4]
unique path: 6 , time: 6.721489 , path:  [2, 3, 5, 4, 6, 3]
unique path: 7 , time: 21.911970999999998 , path:  [2, 3, 5, 4, 6]
unique path: 8 , time: 7.199237900000001 , path:  [2, 3, 4]
unique path: 9 , time: 7.2002141 , path:  [2, 3, 4, 5]
unique path: 10 , time: 6.8283424 , path:  [2, 3, 4, 6]
unique path: 11 , time: 6.8288305000000005 , path:  [2, 3, 4, 6, 5]
unique path: 12 , time: 66.5687492 , path:  [2]
unique path: 13 , time: 44.06655640000001 , path:  [2, 4, 3]
unique path: 14 , time: 44.06753260000001 , path:  [2, 4, 3, 5]
unique path: 15 , time: 51.4856087 , path:  [2, 4]
found batch algorithm => ['2', '3', '5', '4', '6', '3']
Move the exponent(s) into the pairing (technique 2) 

Applying technique 2 : ((prod{z := 1,N} on e(S1_z^delta_z,g2)) * ((prod{z := 1,N} on e(S2_z^delta_z,(u1b * (prod{y := 1,l} on ub_y^k_y%z)))) * (prod{z := 1,N} on e(S3_z^delta_z,(u2b * (prod{y := 1,l} on ub_y^m_y%z)))))) == (prod{z := 1,N} on A^delta_z) 

Combine pairings with common 1st or 2nd element. Reduce N pairings to 1 (technique 3) 

Applying technique 3 : (e((prod{z := 1,N} on S1_z^delta_z),g2) * ((prod{z := 1,N} on (e(S2_z^delta_z,u1b) * e(S2_z^delta_z,(prod{y := 1,l} on ub_y^k_y%z)))) * (prod{z := 1,N} on (e(S3_z^delta_z,u2b) * e(S3_z^delta_z,(prod{y := 1,l} on ub_y^m_y%z)))))) == A^sum{z := 1,N} of delta_z 

Distribute dot products:  

Simplifying => : (e((prod{z := 1,N} on S1_z^delta_z),g2) * (((prod{z := 1,N} on e(S2_z^delta_z,u1b)) * (prod{z := 1,N} on e(S2_z^delta_z,(prod{y := 1,l} on ub_y^k_y%z)))) * ((prod{z := 1,N} on e(S3_z^delta_z,u2b)) * (prod{z := 1,N} on e(S3_z^delta_z,(prod{y := 1,l} on ub_y^m_y%z)))))) == A^sum{z := 1,N} of delta_z 

Applied waters hash technique (technique 4) 

Applying technique 4 : (e((prod{z := 1,N} on S1_z^delta_z),g2) * (((prod{z := 1,N} on e(S2_z^delta_z,u1b)) * (prod{y := 1,l} on e((prod{z := 1,N} on S2_z^(delta_z * k_y%z)),ub_y))) * ((prod{z := 1,N} on e(S3_z^delta_z,u2b)) * (prod{y := 1,l} on e((prod{z := 1,N} on S3_z^(delta_z * m_y%z)),ub_y))))) == A^sum{z := 1,N} of delta_z 

Merge pairings with common first or second element. 

Combine Pairings: : (e((prod{z := 1,N} on S1_z^delta_z),g2) * (((prod{z := 1,N} on e(S2_z^delta_z,u1b)) * (prod{y := 1,l} on e((prod{z := 1,N} on (S2_z^(delta_z * k_y%z) * S3_z^(delta_z * m_y%z))),ub_y))) * (prod{z := 1,N} on e(S3_z^delta_z,u2b)))) == A^sum{z := 1,N} of delta_z 

Combine pairings with common 1st or 2nd element. Reduce N pairings to 1 (technique 3) 

Applying technique 3 : (e((prod{z := 1,N} on S1_z^delta_z),g2) * ((e((prod{z := 1,N} on S2_z^delta_z),u1b) * (prod{y := 1,l} on e((prod{z := 1,N} on (S2_z^(delta_z * k_y%z) * S3_z^(delta_z * m_y%z))),ub_y))) * e((prod{z := 1,N} on S3_z^delta_z),u2b))) == A^sum{z := 1,N} of delta_z 

Final batch eq: (e((prod{z := 1,N} on S1_z^delta_z),g2) * ((e((prod{z := 1,N} on S2_z^delta_z),u1b) * (prod{y := 1,l} on e((prod{z := 1,N} on (S2_z^(delta_z * k_y%z) * S3_z^(delta_z * m_y%z))),ub_y))) * e((prod{z := 1,N} on S3_z^delta_z),u2b))) == A^sum{z := 1,N} of delta_z
<====	PREP FOR CODE GEN	====>

Final version => (e(dotA,mpk#1) * ((e(dotB,mpk#6) * dotF) * e(dotD,mpk#7))) == A^sumE 

Compute:  dotA := (prod{z := 0,N} on S1_z^delta_z)
Compute:  dotB := (prod{z := 0,N} on S2_z^delta_z)
Compute:  dotC := (prod{z := 0,N} on (S2_z^(delta_z * k_y%z) * S3_z^(delta_z * m_y%z)))
Compute:  dotD := (prod{z := 0,N} on S3_z^delta_z)
Compute:  sumE := sum{z := 0,N} of delta_z
Compute:  dotF := (prod{y := 0,l} on e(dotC,mpk#8_y))
Precompute: A := e(h,g2)^alpha
Precompute: delta := for{z := 1, N} do prng_z
dotA := G1
dotB := G1
dotC := G1
dotD := G1
sumE := ZR
dotF := GT
List := mpk#8 in y
List := k in y
List := m in y
Sort := mpk#0
