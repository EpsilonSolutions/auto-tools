name := bls
# number of signatures in a batch
N := 100
setting := asymmetric

# types for variables used in verification.
# all other variable types are inferred by SDL parser
BEGIN :: types
M := str
incorrectIndices := list{int}
endSigNum := int
startSigNum := int
delta := list{ZR}
dotALoopVal := G1
dotBLoopVal := G1
dotBCache := list{G1}
dotACache := list{G1}
Mlist := list{str}
pk := G2
siglist := list{G1}
g := G2
END :: types

# description of key generation and signing algorithms
BEGIN :: func:keygen
input := None
 g := random(G2)
 x := random(ZR)
 pk := g^x
 sk := x
output := list{pk, sk, g}
END :: func:keygen

BEGIN :: func:sign
input := list{sk, M}
 sig := (H(M, G1)^sk)
output := sig
END :: func:sign

BEGIN :: func:verify
 input := list{pk, M, sig, g}
 h := H(M, G1)
 BEGIN :: if
 if {e(h, pk) == e(sig, g)}
 output := True
 else
 output := False
 END :: if
END :: func:verify

# Batcher SDL input
constant := g
public :=  pk
signature :=  sig
message :=  h

# single signer
BEGIN :: count
message_count := N
public_count := one
signature_count := N
END :: count

# variables computed before each signature verification
BEGIN :: precompute
  h := H(M, G1)
END :: precompute

# individual verification check
verify := {e(h, pk) == e(sig, g)}
secparam := 80

BEGIN :: func:membership
 input := list{g, pk, siglist}


BEGIN :: if
if { ismember(g) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(pk) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(siglist) == False }
    output := False
END :: if

 output := True
END :: func:membership


BEGIN :: func:dividenconquer
 input := list{delta, startSigNum, endSigNum, incorrectIndices, dotACache, dotBCache, pk, g}
dotALoopVal := init(G1)
dotBLoopVal := init(G1)

BEGIN :: for
for{z := startSigNum, endSigNum}
dotALoopVal := dotALoopVal * dotACache#z
dotBLoopVal := dotBLoopVal * dotBCache#z
END :: for
BEGIN :: if
 if { e(dotALoopVal,pk) == e(dotBLoopVal,g) }
    return := None
 else
    midwayFloat := ((endSigNum - startSigNum) / 2)
    midway := integer(midwayFloat)
END :: if


BEGIN :: if
 if { midway == 0 } 
    addToList(incorrectIndices, startSigNum)
    output := None
 else
    midSigNum := startSigNum + midway
    dividenconquer(delta, startSigNum, midSigNum, incorrectIndices, dotACache, dotBCache, pk, g)
    dividenconquer(delta, midSigNum, endSigNum, incorrectIndices, dotACache, dotBCache, pk, g)
END :: if


 output := None
END ::func:dividenconquer


BEGIN :: func:batchverify
input := list{Mlist, g, pk, siglist, incorrectIndices}

BEGIN :: for
for{z := 0, N}
 delta#z := SmallExp(secparam)
END :: for

BEGIN :: if
 if {(membership(g, pk, siglist) == False)}
     output := False
END :: if


BEGIN :: for
for{z := 0, N}
h := H(Mlist#z,G1)
dotACache#z := (h^delta#z)
dotBCache#z := (siglist#z^delta#z)
END :: for
 dividenconquer(delta, 0, N, incorrectIndices, dotACache, dotBCache, pk, g)

 output := incorrectIndices
END ::func:batchverify


