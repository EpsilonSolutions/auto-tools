name := chp
setting := asymmetric
N := 100

BEGIN :: types
t1 := str
t2 := str
t3 := str
M := str
g2 := G2
pk := G2
sig := G1
b := ZR
a := G1
h := G1
delta := list{ZR}
startSigNum := int
incorrectIndices := list{int}
endSigNum := int
dotBLoopVal := G2
dotALoopVal := G1
dotCLoopVal := G2
dotACache := list{G1}
dotBCache := list{G2}
dotCCache := list{G2}
siglist := list{G1}
pklist := list{G2}
Mlist := list{str}
END :: types

BEGIN :: func:setup
input := list{None}
 g2 := random(G2)
output := g2
END :: func:setup

BEGIN :: func:keygen
input := list{g2}
 alpha := random(ZR)
 sk := alpha 
 pk := g2^alpha
output := list{pk, sk}
END :: func:keygen

BEGIN :: func:sign
input := list{pk, sk, M, t1, t2, t3}
a := H(t1, G1)
h := H(t2, G1)
b := H(concat{M, t3}, ZR)
sig := (a^sk) * (h^(sk*b))
output := sig
END :: func:sign

BEGIN :: func:verify
input := list{pk, g2, sig, M, t1, t2, t3} 
a := H(t1, G1)
h := H(t2, G1)
b := H(concat{M, t3}, ZR)
BEGIN :: if
if { e(sig, g2) == (e(a, pk) * e(h, pk)^b) }
   output := True
else
   output := False
END :: if
END :: func:verify

BEGIN :: precompute
a := H(t1, G1)
h := H(t2, G1)
b := H(concat{M, t3}, ZR)
END :: precompute

constant := list{a, g2, h, t1, t2, t3}
public := pk
signature := list{sig, b}
message := list{M}

# different messages/sigs under a single signer
BEGIN :: count
message_count := N
public_count := N
signature_count := N
END :: count


verify := { e(sig, g2) == e(a, pk) * e(h, pk)^b }


secparam := 80

BEGIN :: func:membership
 input := list{g2, pklist, siglist}

BEGIN :: for
for{z := 0, N}

BEGIN :: if
if { ismember(pklist#z) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(siglist#z) == False }
    output := False
END :: if
END :: for

BEGIN :: if
if { ismember(g2) == False }
    output := False
END :: if


 output := True
END :: func:membership


BEGIN :: func:dividenconquer
 input := list{delta, startSigNum, endSigNum, incorrectIndices, dotACache, dotBCache, dotCCache, g2, a, h}
dotALoopVal := init(G1)
dotBLoopVal := init(G2)
dotCLoopVal := init(G2)

BEGIN :: for
for{z := startSigNum, endSigNum}
dotALoopVal := dotALoopVal * dotACache#z
dotBLoopVal := dotBLoopVal * dotBCache#z
dotCLoopVal := dotCLoopVal * dotCCache#z
END :: for
BEGIN :: if
 if { e(dotALoopVal,g2) == (e(a,dotBLoopVal) * e(h,dotCLoopVal)) }
    return := None
 else
    midwayFloat := ((endSigNum - startSigNum) / 2)
    midway := integer(midwayFloat)
END :: if


BEGIN :: if
 if { midway == 0 } 
    addToList(incorrectIndices, startSigNum)
    output := None
 else
    midSigNum := startSigNum + midway
    dividenconquer(delta, startSigNum, midSigNum, incorrectIndices, dotACache, dotBCache, dotCCache, g2, a, h)
    dividenconquer(delta, midSigNum, endSigNum, incorrectIndices, dotACache, dotBCache, dotCCache, g2, a, h)
END :: if


 output := None
END ::func:dividenconquer


BEGIN :: func:batchverify
input := list{Mlist, g2, pklist, siglist, t1, t2, t3, incorrectIndices}

BEGIN :: for
for{z := 0, N}
delta#z := SmallExp(secparam)
END :: for

BEGIN :: if
 if {(membership(g2, pklist, siglist) == False)}
     output := False
END :: if

h := H(t2,G1)
a := H(t1,G1)

BEGIN :: for
for{z := 0, N}
b := H(concat{Mlist#z, t3},ZR)
dotACache#z := (siglist#z^delta#z)
dotBCache#z := (pklist#z^delta#z)
dotCCache#z := (pklist#z^(b * delta#z))
END :: for
 dividenconquer(delta, 0, N, incorrectIndices, dotACache, dotBCache, dotCCache, g2, a, h)

 output := incorrectIndices
END ::func:batchverify


