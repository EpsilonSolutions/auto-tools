name := cl04
setting := asymmetric
N := 100

BEGIN :: types
M := Str
sig := list{G2}
endSigNum := Int
delta2 := list{ZR}
delta1 := list{ZR}
startSigNum := Int
incorrectIndices := list{Int}
dotCLoopVal := G2
dotBLoopVal := G2
dotALoopVal := G2
dotACache := list{G2}
dotBCache := list{G2}
dotCCache := list{G2}
X := G1
Y := G1
alist := list{G2}
Mlist := list{Str}
blist := list{G2}
clist := list{G2}
g := G1
END :: types

BEGIN :: func:setup
input := list{None}
 g := random(G1)
output := g
END :: func:setup

BEGIN :: func:keygen
input := list{g}
 x := random(ZR)
 y := random(ZR)
 X := g^x
 Y := g^y
 pk := list{X, Y}
 sk := list{x, y}
output := list{pk, sk}
END :: func:keygen

BEGIN :: func:sign
input := list{sk, M}
sk := expand{x, y}
 a := random(G2)
 m := H(M, ZR)
 b := a^y
 c := a^(x + (m * x * y))
 sig := list{a, b, c}
output := sig
END :: func:sign

BEGIN :: func:verify
input := list{pk, g, M, sig}
sig := expand{a, b, c}
pk := expand{X, Y}

 m := H(M, ZR)
BEGIN :: if
if {{ e(Y, a) == e(g, b) } and { (e(X, a) * (e(X, b)^m)) == e(g, c) }}
   output := True
else
   output := False
END :: if
END :: func:verify

BEGIN :: precompute
m := H(M, ZR)
END :: precompute

constant := g
public := pk
signature := sig
message := m

BEGIN :: count
message_count := N
public_count := one
signature_count := N
END :: count

verify := {{ e(Y, a) == e(g, b) } and { (e(X, a) * (e(X, b)^m)) == e(g, c) }}
secparam := 80

BEGIN :: func:membership
 input := list{X, Y, g, alist, blist, clist}

BEGIN :: for
for{z := 0, N}

BEGIN :: if
if { ismember(alist#z) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(blist#z) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(clist#z) == False }
    output := False
END :: if
END :: for

BEGIN :: if
if { ismember(X) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(Y) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(g) == False }
    output := False
END :: if


 output := True
END :: func:membership


BEGIN :: func:dividenconquer
 input := list{delta1, delta2, startSigNum, endSigNum, incorrectIndices, dotACache, dotBCache, dotCCache, g, Y, X}
dotALoopVal := init(G2)
dotBLoopVal := init(G2)
dotCLoopVal := init(G2)

BEGIN :: for
for{z := startSigNum, endSigNum}
dotALoopVal := dotALoopVal * dotACache#z
dotBLoopVal := dotBLoopVal * dotBCache#z
dotCLoopVal := dotCLoopVal * dotCCache#z
END :: for
BEGIN :: if
 if { (e(g,dotALoopVal) * e(Y,dotBLoopVal)) == e(X,dotCLoopVal) }
    return := None
 else
    midwayFloat := ((endSigNum - startSigNum) / 2)
    midway := integer(midwayFloat)
END :: if


BEGIN :: if
 if { midway == 0 } 
    addToList(incorrectIndices, startSigNum)
    output := None
 else
    midSigNum := startSigNum + midway
    dividenconquer(delta1, delta2, startSigNum, midSigNum, incorrectIndices, dotACache, dotBCache, dotCCache, g, Y, X)
    dividenconquer(delta1, delta2, midSigNum, endSigNum, incorrectIndices, dotACache, dotBCache, dotCCache, g, Y, X)
END :: if


 output := None
END ::func:dividenconquer


BEGIN :: func:batchverify
input := list{pk, g, Mlist, alist, blist, clist, incorrectIndices}
pk := expand{X, Y}

BEGIN :: for
for{z := 0, N}
delta1#z := SmallExp(secparam)
delta2#z := SmallExp(secparam)
END :: for

BEGIN :: if
 if {(membership(X, Y, g, alist, blist, clist) == False)}
     output := False
END :: if


BEGIN :: for
for{z := 0, N}
m := H(Mlist#z,ZR)
dotACache#z := ((blist#z^delta1#z) * (clist#z^delta2#z))
dotBCache#z := (alist#z^-delta1#z)
dotCCache#z := ((alist#z^delta2#z) * (blist#z^(m * delta2#z)))
END :: for
 dividenconquer(delta1, delta2, 0, N, incorrectIndices, dotACache, dotBCache, dotCCache, g, Y, X)

 output := incorrectIndices
END ::func:batchverify


