name := cyh
setting := asymmetric
N := 100
l := 3
secparam := 80

BEGIN :: types
M := str
ID := str
L := str
ID_list := list{str}
Lt := str
u := list{G1}
h := list{ZR}
s := int
pklist := list{G1}
pk := G1
sk := G1
P := G2
S := G1
g := G2
r := ZR
delta := list{ZR}
startSigNum := int
endSigNum := int
incorrectIndices := list{int}
dotBLoopVal := G1
dotCLoopVal := G1
dotCCache := list{G1}
dotBCache := list{G1}
Slist := list{G1}
ulist := list{ulink}
ulink := list{G1}
Mlist := list{str}
END :: types

BEGIN :: precompute
BEGIN :: for
for{y := 0, l}
 h#y := H(concat{M, Lt, u#y}, ZR)
END :: for
END :: precompute

constant := list{P, g, Lt}
public := pklist
signature := list{S, u}
message := list{h, M}

BEGIN :: count
message_count := N
public_count := l
signature_count := N
END :: count

verify := { e((prod{y := 0, l} on (u_y * (pklist_y^h_y))) , P) == e(S, g) }

BEGIN :: func:setup
 input := None
 g := random(G2)
 alpha := random(ZR)
 P := g ^ alpha
 output := list{P, g, alpha}
END :: func:setup

BEGIN :: func:keygen
 input := list{alpha, ID}
 sk := H(ID, G1) ^ alpha
 pk := H(ID, G1)
 output := list{pk, sk}
END :: func:keygen

BEGIN :: func:sign
 input := list{ID, ID_list, pk, sk, M}
 Lt := concat(ID_list)

BEGIN :: for
for{i := 0, l}
BEGIN :: if
 if { ID != ID_list#i }
    u#i := random(G1)
    h#i := H(concat{M, Lt, u#i}, ZR)
 else
    s := i
END :: if
END :: for

 r := random(ZR)
BEGIN :: for
for{y := 0, l}
   pklist#y := H(ID_list#y, G1)
END :: for

dotProd := init(G1)

BEGIN :: for
for{i := 0, l}
BEGIN :: if
if {ID != ID_list#i}
   dotProd := dotProd * (u#i * (pklist#i ^ h#i))
END :: if
END :: for

  u#s? := (pk ^ r) * (dotProd ^ -1)
  h#s? := H(concat{M, Lt, u#s}, ZR)
  S := sk ^ (h#s + r)
output := list{Lt, pklist, u, S}
END :: func:sign

BEGIN :: func:verify
input := list{Lt, pklist, P, g, M, u, S}

BEGIN :: for
for{y := 0, l}
 h#y := H(concat{M, Lt, u#y}, ZR)
END :: for

dotProd := init(G1)

BEGIN :: for
for{y := 0, l}
   dotProd := dotProd * (u#y * (pklist#y ^ h#y))
END :: for

BEGIN :: if
if {e(dotProd, P) == e(S, g)}
   output := True
else
   output := False
END :: if
END :: func:verify



BEGIN :: func:membership
 input := list{P, Slist, g, pklist, ulist}

BEGIN :: for
for{z := 0, N}

BEGIN :: if
if { ismember(Slist#z) == False }
    output := False
END :: if

BEGIN :: forinner
forinner{y := 0, l}

BEGIN :: if
if { ismember(ulist#z#y) == False }
    output := False
END :: if
END :: forinner

END :: for

BEGIN :: if
if { ismember(pklist) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(P) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(g) == False }
    output := False
END :: if


 output := True
END :: func:membership


BEGIN :: func:dividenconquer
 input := list{delta, startSigNum, endSigNum, incorrectIndices, dotBCache, dotCCache, P, g}
dotBLoopVal := init(G1)
dotCLoopVal := init(G1)

BEGIN :: for
for{z := startSigNum, endSigNum}
dotBLoopVal := dotBLoopVal * dotBCache#z
dotCLoopVal := dotCLoopVal * dotCCache#z
END :: for
BEGIN :: if
 if { e(dotBLoopVal,P) == e(dotCLoopVal,g) }
    return := None
 else
    midwayFloat := ((endSigNum - startSigNum) / 2)
    midway := integer(midwayFloat)
END :: if


BEGIN :: if
 if { midway == 0 } 
    addToList(incorrectIndices, startSigNum)
    output := None
 else
    midSigNum := startSigNum + midway
    dividenconquer(delta, startSigNum, midSigNum, incorrectIndices, dotBCache, dotCCache, P, g)
    dividenconquer(delta, midSigNum, endSigNum, incorrectIndices, dotBCache, dotCCache, P, g)
END :: if


 output := None
END ::func:dividenconquer


BEGIN :: func:batchverify
input := list{Lt, Mlist, P, Slist, g, pklist, ulist, incorrectIndices}

BEGIN :: for
for{z := 0, N}
delta#z := SmallExp(secparam)
END :: for

BEGIN :: if
 if {(membership(P, Slist, g, pklist, ulist) == False)}
     output := False
END :: if


BEGIN :: for
for{z := 0, N}
dotALoopVal := init(G1)

BEGIN :: forinner
forinner{y := 0, l}
h#y := H(concat{Mlist#z, Lt, ulist#z#y},ZR)
dotALoopVal := dotALoopVal * ((ulist#z#y^delta#z) * (pklist#y^(h#y * delta#z)))
END :: forinner
dotBCache#z := dotALoopVal
dotCCache#z := (Slist#z^delta#z)
END :: for
 dividenconquer(delta, 0, N, incorrectIndices, dotBCache, dotCCache, P, g)

 output := incorrectIndices
END ::func:batchverify


