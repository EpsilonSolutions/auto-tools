name := hess
N := 2
setting := asymmetric
secparam := 80

BEGIN :: types
S2 := G1
g2 := G2
S1 := GT
pk := G1
a := ZR
P := G2
ID := str
M := str
incorrectIndices := list{int}
endSigNum := int
startSigNum := int
delta := list{ZR}
dotCLoopVal := GT
dotALoopVal := G1
dotBLoopVal := G1
dotBCache := list{G1}
dotACache := list{G1}
dotCCache := list{GT}
pklist := list{G1}
Mlist := list{str}
S1list := list{GT}
S2list := list{G1}
END :: types

BEGIN :: func:setup
input := None
 g2 := random(G2)
 alpha := random(ZR)
 P := g2^alpha
output := list{g2, alpha, P}
END :: func:setup

BEGIN :: func:keygen
input := list{alpha, ID}
 sk := (H(ID, G1))^alpha
 pk := H(ID, G1)
output := list{pk, sk}
END :: func:keygen

BEGIN :: func:sign
input := list{pk, sk, M, g2}
 h := random(G1)
 s := random(ZR)
 S1 := (e(h, g2))^s
 a := H(concat{M, S1}, ZR)
 S2 := (sk^a) * (h^s)
output := list{S1, S2}
END :: func:sign

BEGIN :: func:verify
input := list{P, g2, pk, M, S1, S2}
 a := H(concat{M, S1}, ZR)
 BEGIN :: if
 if {e(S2, g2) == ((e(pk, P)^a) * S1)}
 output := True
 else
 output := False
 END :: if
END :: func:verify

constant := list{P, g2}
public :=  pk
signature :=  list{S1, S2}
message :=  a

BEGIN :: count
message_count := N
public_count := N
signature_count := N
END :: count

BEGIN :: precompute
 a := H(concat{M, S1}, ZR)
END :: precompute

verify := {e(S2, g2) == ((e(pk, P)^a) * S1)}

BEGIN :: func:membership
 input := list{P, S1list, S2list, g2, pklist}


BEGIN :: if
if { ismember(P) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(S1list) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(S2list) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(g2) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(pklist) == False }
    output := False
END :: if

 output := True
END :: func:membership


BEGIN :: func:dividenconquer
 input := list{delta, startSigNum, endSigNum, incorrectIndices, dotACache, dotBCache, dotCCache, g2, P}
dotALoopVal := init(G1)
dotBLoopVal := init(G1)
dotCLoopVal := init(GT)

BEGIN :: for
for{z := startSigNum, endSigNum}
dotALoopVal := dotALoopVal * dotACache#z
dotBLoopVal := dotBLoopVal * dotBCache#z
dotCLoopVal := dotCLoopVal * dotCCache#z
END :: for
BEGIN :: if
 if { e(dotALoopVal,g2) == (e(dotBLoopVal,P) * dotCLoopVal) }
    return := None
 else
    midwayFloat := ((endSigNum - startSigNum) / 2)
    midway := integer(midwayFloat)
END :: if


BEGIN :: if
 if { midway == 0 } 
    addToList(incorrectIndices, startSigNum)
    output := None
 else
    midSigNum := startSigNum + midway
    dividenconquer(delta, startSigNum, midSigNum, incorrectIndices, dotACache, dotBCache, dotCCache, g2, P)
    dividenconquer(delta, midSigNum, endSigNum, incorrectIndices, dotACache, dotBCache, dotCCache, g2, P)
END :: if


 output := None
END ::func:dividenconquer


BEGIN :: func:batchverify
input := list{Mlist, P, S1list, S2list, g2, pklist, incorrectIndices}

BEGIN :: for
for{z := 0, N}
 delta#z := SmallExp(secparam)
END :: for

BEGIN :: if
 if {(membership(P, S1list, S2list, g2, pklist) == False)}
     output := False
END :: if


BEGIN :: for
for{z := 0, N}
a := H(concat{Mlist#z, S1list#z},ZR)
dotACache#z := (S2list#z^delta#z)
dotBCache#z := (pklist#z^(a * delta#z))
dotCCache#z := (S1list#z^delta#z)
END :: for
 dividenconquer(delta, 0, N, incorrectIndices, dotACache, dotBCache, dotCCache, g2, P)

 output := incorrectIndices
END ::func:batchverify


