name := hw
N := 100
setting := asymmetric

BEGIN :: types
 sig1 := G1
 sig2 := G1
 m := Str
 M := ZR
 D := GT
 V := GT
 U := GT
 w1 := G1
 w2 := G2
 z1 := G1
 z2 := G2
 h1 := G1
 h2 := G2
 A := G2
 r := ZR
 n := ZR
 i := Int
END :: types

BEGIN :: func:setup
input := None
 g1 := random(G1)
 g2 := random(G2)
output := list{g1, g2}
END :: func:setup

BEGIN :: func:keygen
input := list{g1, g2} 
 a := random(ZR)
 A := g2^a
 u := random(G1)
 v := random(G1)
 d := random(G1)
 U := e(u, A)
 V := e(v, A)
 D := e(d, A)
 w := random(ZR)
 z := random(ZR)
 h := random(ZR)
 w1 := g1 ^ w
 w2 := g2 ^ w
 z1 := g1 ^ z
 z2 := g2 ^ z
 h1 := g1 ^ h
 h2 := g2 ^ h
 i := 0
 pk := list{U, V, D, g1, g2, w1, w2, z1, z2, h1, h2, u, v, d}
 sk := a
output := list{i, pk, sk}
END :: func:keygen 

BEGIN :: func:sign
input := list{pk, sk, i, m}
 pk := expand{U, V, D, g1, g2, w1, w2, z1, z2, h1, h2, u, v, d}
 i := i + 1
 M := H(m, ZR)
 r := random(ZR)
 t := random(ZR)
 n := ceillog(2, i)
 sig1:= (((u^M)*(v^r)*d)^sk)*((w1^n)*(z1^i)*h1)^t 
 sig2 := g1 ^ t
output := list{sig1, sig2, r, i}
END :: func:sign


BEGIN :: func:verify
input := list{U, V, D, g2, w2, z2, h2, m, sig1, sig2, r, i}
 M := H(m, ZR)
 n := ceillog(2, i)

BEGIN :: if
 if { e(sig1, g2) == ((U^M) * (V^r) * D * e(sig2, ((w2^n)*((z2^i)*h2)))) }
    output := True
 else
    output := False
END :: if
END :: func:verify

constant := list{g1, g2, w2, z2, h2}
public := list{U, V, D}
signature := list{sig1, sig2, r, i, n}
message := M

BEGIN :: precompute
 M := H(m, ZR)
 n := ceillog(2, i)
END :: precompute

# single signer
BEGIN :: count
message_count := N
public_count := one
signature_count := N
END :: count

verify := { e(sig1, g2) == ((U^M) * (V^r) * D * e(sig2, ((w2^n)*((z2^i)*h2)))) }
