name := dse09rcs
setting := asymmetric
N := 100

BEGIN :: types
m := ZR
delta4 := list{ZR}
startSigNum := Int
delta3 := list{ZR}
endSigNum := Int
delta1 := list{ZR}
incorrectIndices := list{Int}
delta2 := list{ZR}
dotDLoopVal := G1
dotILoopVal := G2
dotJLoopVal := G2
dotELoopVal := G1
dotALoopVal := G1
dotGLoopVal := G1
dotBLoopVal := G1
sumCLoopVal := ZR
dotLLoopVal := G2
dotHLoopVal := G2
dotKLoopVal := G2
dotFLoopVal := G1
dotECache := list{G1}
dotKCache := list{G2}
dotHCache := list{G2}
dotGCache := list{G1}
dotDCache := list{G1}
dotBCache := list{G1}
sumCCache := list{ZR}
dotLCache := list{G2}
dotJCache := list{G2}
dotACache := list{G1}
dotFCache := list{G1}
dotICache := list{G2}
S5list := list{G1}
S3list := list{G1}
mlist := list{ZR}
g2abrho := G2
V1G1 := G1
S0list := list{G2}
S2list := list{G1}
V1G2 := G2
F3G2 := G2
F3G1 := G1
S1list := list{G1}
VG1 := G1
VG2 := G2
g1rho := G1
Rb := G2
g2ba := G2
g2b := G2
g2a := G2
RG2 := G2
g1b := G1
g1 := G1
g2 := G2
HG2 := G2
HG1 := G1
F2G2 := G2
F2G1 := G1
U2 := G2
S4list := list{G1}
U1 := G1
END :: types

BEGIN :: func:setup
input := list{None}
 g1 := random(G1)
 g2 := random(G2)
 f2 := random(ZR)
 f3 := random(ZR)
 u := random(ZR)
 
 F2G1 := g1 ^ f2
 F2G2 := g2 ^ f2
 F3G1 := g1 ^ f3
 F3G2 := g2 ^ f3
 U1 := g1 ^ u
 U2 := g2 ^ u
 gk := list{g1, g2, F2G1, F2G2, F3G1, F3G2, U1, U2}
output := gk
END :: func:setup


BEGIN :: func:keygen
input := list{gk}
 gk := expand{g1, g2, F2G1, F2G2, F3G1, F3G2, U1, U2}
 v := random(ZR)
 VG1 := g1 ^ v
 VG2 := g2 ^ v
 v1 := random(ZR)
 V1G1 := g1 ^ v1
 V1G2 := g2 ^ v1
 h := random(ZR)
 HG1 := g1 ^ h
 HG2 := g2 ^ h
 
 a := random(ZR)
 b := random(ZR)
 alpha := random(ZR)
 rho := random(ZR) 
 
 RG1 := VG1 * (V1G1 ^ a)
 RG2 := VG2 * (V1G2 ^ a)
 Rb := RG2 ^ b
 galpha := g1 ^ alpha
 g1b := g1 ^ b
 g2b := g2 ^ b
 g1a := g2 ^ a 
 g2a := g2 ^ a
 g2ba := g2 ^ (b * a)
 g1rho := g1 ^ rho
 g2abrho := g2 ^ ((alpha * b) / rho)
 
 vk := list{g1b, g2b, g2a, g2ba, RG2, Rb, HG1, HG2, VG1, VG2, V1G1, V1G2, g1rho, g2abrho}
 sk := list{galpha, g1a, g1b}
output := list{vk, sk}
END :: func:keygen


BEGIN :: func:sign
input := list{gk, vk, sk, m}
 gk := expand{g1, g2, F2G1, F2G2, F3G1, F3G2, U1, U2}
 vk := expand{g1b, g2b, g2a, g2ba, RG2, Rb, HG1, HG2, VG1, VG2, V1G1, V1G2, g1rho, g2abrho}
 sk := expand{galpha, g1a, g1b}
 
 M0 := U2 ^ m
 M1 := F2G2 ^ m
 M2 := F3G2 ^ m

 r1 := random(ZR)
 r2 := random(ZR)
 r := r1 + r2
 z := random(ZR)
 
 S0 := (M0 * HG2) ^ r1
 S1 := galpha * (VG1 ^ r)
 S2 := ((V1G1 ^ r) * (g1 ^ -z)) 
 S3 := g1b ^ z
 S4 := g1b ^ r2
 S5 := g1 ^ r1
 sig := list{S0, S1, S2, S3, S4, S5}
output := sig
END :: func:sign


BEGIN :: func:verify
input := list{g1, g2, F2G1, F2G2, F3G1, F3G2, U1, U2, vk, m, sig}
 vk := expand{g1b, g2b, g2a, g2ba, RG2, Rb, HG1, HG2, VG1, VG2, V1G1, V1G2, g1rho, g2abrho}
 sig := expand{S0, S1, S2, S3, S4, S5}

 M0 := U2 ^ m
 M1 := F2G2 ^ m
 M2 := F3G2 ^ m
 
BEGIN :: if
if {{ e(S5, M0*HG2) == e(g1, S0) } and { (e(S1, g2b) * e(S2, g2ba) * e(S3, g2a)) == (e(S4, RG2) * e(S5, Rb) * e(g1rho, g2abrho))} and { e(F2G1, M0) == e(U1, M1) } and { e(F3G1, M0) == e(U1, M2) }}
   output := True
else
   output := False
END :: if
END :: func:verify


BEGIN :: precompute
 M0 := U2 ^ m
 M1 := F2G2 ^ m
 M2 := F3G2 ^ m
END :: precompute

constant := list{g1, g2, F2G1, F2G2, F3G1, F3G2, U1, U2}
public := vk 
signature := sig
message := m
#transform := list{2, 6, 3, 5, 3, 8, 3}

BEGIN :: count
message_count := N
public_count := one
signature_count := N
END :: count

verify := {{ e(S5, M0*HG2) == e(g1, S0) } and { (e(S1, g2b) * e(S2, g2ba) * e(S3, g2a)) == (e(S4, RG2) * e(S5, Rb) * e(g1rho, g2abrho))} and { e(F2G1, M0) == e(U1, M1) } and { e(F3G1, M0) == e(U1, M2) }}


secparam := 80

BEGIN :: func:membership
 input := list{g1, g2, F2G1, F2G2, F3G1, F3G2, U1, U2, g1b, g2b, g2a, g2ba, RG2, Rb, HG1, HG2, VG1, VG2, V1G1, V1G2, g1rho, g2abrho, mlist, S0list, S1list, S2list, S3list, S4list, S5list}

BEGIN :: for
for{z := 0, N}

BEGIN :: if
if { ismember(S0list#z) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(S1list#z) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(S2list#z) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(S3list#z) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(S4list#z) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(S5list#z) == False }
    output := False
END :: if
END :: for

BEGIN :: if
if { ismember(mlist) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(g1) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(g2) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(F2G1) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(F2G2) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(F3G1) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(F3G2) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(U1) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(U2) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(g1b) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(g2b) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(g2a) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(g2ba) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(RG2) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(Rb) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(HG1) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(HG2) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(VG1) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(VG2) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(V1G1) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(V1G2) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(g1rho) == False }
    output := False
END :: if

BEGIN :: if
if { ismember(g2abrho) == False }
    output := False
END :: if


 output := True
END :: func:membership


BEGIN :: func:dividenconquer
 input := list{delta1, delta2, delta3, delta4, startSigNum, endSigNum, incorrectIndices, dotACache, dotBCache, dotDCache, dotECache, dotFCache, dotGCache, dotHCache, dotICache, dotJCache, dotKCache, dotLCache, sumCCache, RG2, Rb, preP0, g2b, g2ba, g2a, HG2, g1, U1, F3G1, F2G1}
dotALoopVal := init(G1)
dotBLoopVal := init(G1)
dotDLoopVal := init(G1)
dotELoopVal := init(G1)
dotFLoopVal := init(G1)
dotGLoopVal := init(G1)
dotHLoopVal := init(G2)
dotILoopVal := init(G2)
dotJLoopVal := init(G2)
dotKLoopVal := init(G2)
dotLLoopVal := init(G2)
sumCLoopVal := init(ZR)

BEGIN :: for
for{z := startSigNum, endSigNum}
dotALoopVal := dotALoopVal * dotACache#z
dotBLoopVal := dotBLoopVal * dotBCache#z
dotDLoopVal := dotDLoopVal * dotDCache#z
dotELoopVal := dotELoopVal * dotECache#z
dotFLoopVal := dotFLoopVal * dotFCache#z
dotGLoopVal := dotGLoopVal * dotGCache#z
dotHLoopVal := dotHLoopVal * dotHCache#z
dotILoopVal := dotILoopVal * dotICache#z
dotJLoopVal := dotJLoopVal * dotJCache#z
dotKLoopVal := dotKLoopVal * dotKCache#z
dotLLoopVal := dotLLoopVal * dotLCache#z
sumCLoopVal := sumCLoopVal + sumCCache#z
END :: for
BEGIN :: if
 if { (e(dotALoopVal,RG2) * (e(dotBLoopVal,Rb) * ((preP0^sumCLoopVal) * (e(dotDLoopVal,g2b) * (e(dotELoopVal,g2ba) * (e(dotFLoopVal,g2a) * (e(dotGLoopVal,dotHLoopVal) * (e(dotGLoopVal,HG2) * e(g1,dotILoopVal))))))))) == (e(U1,dotJLoopVal) * (e(F3G1,dotKLoopVal) * e(F2G1,dotLLoopVal))) }
    return := None
 else
    midwayFloat := ((endSigNum - startSigNum) / 2)
    midway := integer(midwayFloat)
END :: if


BEGIN :: if
 if { midway == 0 } 
    addToList(incorrectIndices, startSigNum)
    output := None
 else
    midSigNum := startSigNum + midway
    dividenconquer(delta1, delta2, delta3, delta4, startSigNum, midSigNum, incorrectIndices, dotACache, dotBCache, dotDCache, dotECache, dotFCache, dotGCache, dotHCache, dotICache, dotJCache, dotKCache, dotLCache, sumCCache, RG2, Rb, preP0, g2b, g2ba, g2a, HG2, g1, U1, F3G1, F2G1)
    dividenconquer(delta1, delta2, delta3, delta4, midSigNum, endSigNum, incorrectIndices, dotACache, dotBCache, dotDCache, dotECache, dotFCache, dotGCache, dotHCache, dotICache, dotJCache, dotKCache, dotLCache, sumCCache, RG2, Rb, preP0, g2b, g2ba, g2a, HG2, g1, U1, F3G1, F2G1)
END :: if


 output := None
END ::func:dividenconquer


BEGIN :: func:batchverify
input := list{g1, g2, F2G1, F2G2, F3G1, F3G2, U1, U2, vk, mlist, S0list, S1list, S2list, S3list, S4list, S5list, incorrectIndices}
vk := expand{g1b, g2b, g2a, g2ba, RG2, Rb, HG1, HG2, VG1, VG2, V1G1, V1G2, g1rho, g2abrho}

BEGIN :: for
for{z := 0, N}
delta1#z := SmallExp(secparam)
delta2#z := SmallExp(secparam)
delta3#z := SmallExp(secparam)
delta4#z := SmallExp(secparam)
END :: for

BEGIN :: if
 if {(membership(g1, g2, F2G1, F2G2, F3G1, F3G2, U1, U2, g1b, g2b, g2a, g2ba, RG2, Rb, HG1, HG2, VG1, VG2, V1G1, V1G2, g1rho, g2abrho, mlist, S0list, S1list, S2list, S3list, S4list, S5list) == False)}
     output := False
END :: if

preP0 := e(g1rho,g2abrho)

BEGIN :: for
for{z := 0, N}
M2 := (F3G2^mlist#z)
M0 := (U2^mlist#z)
M1 := (F2G2^mlist#z)
dotACache#z := (S4list#z^delta2#z)
dotBCache#z := (S5list#z^delta2#z)
dotDCache#z := (S1list#z^-delta2#z)
dotECache#z := (S2list#z^-delta2#z)
dotFCache#z := (S3list#z^-delta2#z)
dotGCache#z := (S5list#z^-delta1#z)
dotHCache#z := M0
dotICache#z := (S0list#z^delta1#z)
dotJCache#z := ((M2^delta4#z) * (M1^-delta3#z))
dotKCache#z := (M0^-delta4#z)
dotLCache#z := (M0^delta3#z)
sumCCache#z := delta2#z
END :: for
 dividenconquer(delta1, delta2, delta3, delta4, 0, N, incorrectIndices, dotACache, dotBCache, dotDCache, dotECache, dotFCache, dotGCache, dotHCache, dotICache, dotJCache, dotKCache, dotLCache, sumCCache, RG2, Rb, preP0, g2b, g2ba, g2a, HG2, g1, U1, F3G1, F2G1)

 output := incorrectIndices
END ::func:batchverify


