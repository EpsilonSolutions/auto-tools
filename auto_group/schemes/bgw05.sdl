name := bgw05
setting := symmetric

BEGIN :: types
n := Int
S := list{Int}
gl := list{G1}
s := list{G1}
i := Int
END :: types


BEGIN :: func:setup
input := list{n}
g := random(G1)
alpha := random(ZR)
index := ((2 * n) + 1)
BEGIN :: for
for{i := 1,index}
gl#i := (g^(alpha^i))
END :: for
gamma := random(ZR)
v := (g^gamma)

pk := list{g, gl, v}
msk := list{gamma}
output := list{pk, msk, n}
END :: func:setup


BEGIN :: func:keygen
input := list{pk, msk, n}
pk := expand{g, gl, v}
msk := expand{gamma}
BEGIN :: for
for{i := 1,n+1}
s#i := (gl#i^gamma)
END :: for
sk := list{s}
output := sk
END :: func:keygen


BEGIN :: func:encrypt
input := list{S, pk, n}
pk := expand{g, gl, v}
t := random(ZR)
K := (e(gl#n,gl#1)^t)

dotProd1 := init(G1)
BEGIN :: forall
forall{j := S}
dotProd1 := (dotProd1 * gl#n+1-j?)
END :: forall

Hdr2 := ((v * dotProd1)^t)
Hdr1 := (g^t)
Hdr := list{Hdr1, Hdr2}
ct := list{Hdr, K}
output := ct
END :: func:encrypt


BEGIN :: func:decrypt
input := list{S, i, n, Hdr, pk, sk}
Hdr := expand{Hdr1, Hdr2}
pk := expand{g, gl, v}
sk := expand{s}

numerator := e(gl#i,Hdr2)
dotProd2 := init(G1)
lenS := len(S)
BEGIN :: for
for{k := 0, lenS}
j := S#k
BEGIN :: if
if {j != i}
dotProd2 := (dotProd2 * gl#n+1-j+i?)
END :: if
END :: for
denominator := e((s#i * dotProd2),Hdr1)
K := (numerator / denominator)

output := K
END :: func:decrypt
