name := bsw07
setting := symmetric

BEGIN :: types
policystr := str
attrs := list{str}
sh := symmap
coeff := list
S := list{str}
M := GT
END :: types

BEGIN :: func:setup
input := None
g := random(G1)

alpha := random(ZR)
beta := random(ZR)

h := (g^beta)
i := (g^alpha)
egg := (e(g,g)^alpha)

mk := list{beta, i}
pk := list{g, h, egg}

output := list{mk, pk}
END :: func:setup


BEGIN :: func:keygen
input := list{pk, mk, S}

pk := expand{g, h, egg}
mk := expand{beta, i}

r := random(ZR)
p0 := (h^r)
D := ((i * p0)^(1 / beta))

Y := len(S)
BEGIN :: for
for{y := 0,Y}
sUSy := random(ZR)
y0 := S#y
Dj#y0 := (p0 * (H(y0,G1)^sUSy))
Djp#y0 := (g^sUSy)
END :: for

sk := list{D, Dj, Djp}
output := sk
END :: func:keygen


BEGIN :: func:encrypt
input := list{pk, M, policyUSstr}
pk := expand{g, h, egg}

policy := createPolicy(policyUSstr)
attrs := getAttributeList(policy)
s := random(ZR)
sh := calculateSharesDict(s, policy)
Y := len(sh)

Ctl := (M * (egg^s))
C := (h^s)

BEGIN :: for
for{y := 0,Y}
y1 := attrs#y
Cr#y1 := (g^sh#y1)
Cpr#y1 := (H(y1,G1)^sh#y1)
END :: for

ct := list{policystr, Ctl, C, Cr, Cpr}
output := ct
END :: func:encrypt


BEGIN :: func:decrypt
input := list{pk, sk, S, ct}
ct := expand{policystr, Ctl, C, Cr, Cpr}
sk := expand{D, Dj, Djp}

policy := createPolicy(policystr)
attrs := prune(policy, S)
coeff := getCoefficients(policy)

Y := len(attrs)
resVarName0 := init(GT)
BEGIN :: for
for{y := 0, Y}
y2 := GetString(attrs#y)
resVarName1 := ((e(Cr#y2,Dj#y2) / e(Djp#y2,Cpr#y2))^coeff#y2)
resVarName0 := resVarName0 * resVarName1
END :: for
A := resVarName0

result0 := e(C,D)
result1 := (result0 / A)
M := (Ctl / result1)

output := M
END :: func:decrypt
