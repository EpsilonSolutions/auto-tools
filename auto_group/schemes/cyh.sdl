name := cyh
setting := symmetric

BEGIN :: types
M := Str
ID := Str
L := Str
ID_list := list{Str}
Lt := Str
h := list{ZR}
s := Int
END :: types

BEGIN :: func:setup
 input := None
 g := random(G1)
 alpha := random(ZR)
 P := g ^ alpha
 output := list{P, g, alpha}
END :: func:setup


BEGIN :: func:keygen
 input := list{alpha, ID}
 sk := H(ID, G1) ^ alpha
 pk := H(ID, G1)
 output := list{pk, sk}
END :: func:keygen

BEGIN :: func:sign
 input := list{ID, ID_list, pk, sk, M}
 Lt := concat(ID_list)

BEGIN :: for
for{i := 0, l}
BEGIN :: if
 if { ID != ID_list#i }
    u#i := random(G1)
    h#i := H(concat{M, Lt, u#i}, ZR)
 else
    s := i
END :: if
END :: for

 r := random(ZR)
BEGIN :: for
for{y := 0, l}
   pklist#y := H(ID_list#y, G1)
END :: for

dotProd := init(G1)

BEGIN :: for
for{i := 0, l}
BEGIN :: if
if {ID != ID_list#i}
   dotProd := dotProd * (u#i * (pklist#i ^ h#i))
END :: if
END :: for

  u#s? := (pk ^ r) * (dotProd ^ -1)
  h#s? := H(concat{M, Lt, u#s}, ZR)
  S := sk ^ (h#s + r)
sig := list{Lt, pklist, u, S}
output := sig
END :: func:sign

BEGIN :: func:verify
input := list{P, g, M, sig}
sig := expand{Lt, pklist, u, S}

BEGIN :: for
for{y := 0, l}
 h#y := H(concat{M, Lt, u#y}, ZR)
END :: for

dotProd := init(G1)

BEGIN :: for
for{y := 0, l}
   dotProd := dotProd * (u#y * (pklist#y ^ h#y))
END :: for

BEGIN :: if
if {e(dotProd, P) == e(S, g)}
   output := True
else
   output := False
END :: if
END :: func:verify


