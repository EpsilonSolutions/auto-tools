name := dse09
setting := symmetric

BEGIN :: types
id := Str
M := GT
D := list
mpk := list
msk := list
sk := list
ct := list
END :: types

BEGIN :: func:setup
input := None
g := random(G1)
w := random(G1) 
u := random(G1)
h := random(G1)
v := random(G1)
v1 := random(G1)
v2 := random(G1)

a1 := random(ZR)
a2 := random(ZR) 
b := random(ZR) 
alpha := random(ZR)
        
gb := g ^ b
ga1 := g ^ a1
ga2 := g ^ a2
gba1 := gb ^ a1
gba2 := gb ^ a2
tau1 := v * (v1 ^ a1)
tau2 := v * (v2 ^ a2)        
tau1b := tau1 ^ b
tau2b := tau2 ^ b
eggalphaa1b := e(g, g)^(alpha * (a1 * b)) 
galpha := g ^ alpha
galphaa1 := galpha ^ a1

mpk := list{g, gb, ga1, ga2, gba1, gba2, tau1, tau2, tau1b, tau2b, w, u, h, eggalphaa1b}
msk := list{galpha, galphaa1, v, v1, v2, alpha}

output := list{mpk, msk}
END :: func:setup


BEGIN :: func:keygen
input := list{mpk, msk, id}
mpk := expand{g, gb, ga1, ga2, gba1, gba2, tau1, tau2, tau1b, tau2b, w, u, h, eggalphaa1b}
msk := expand{galpha, galphaa1, v, v1, v2, alpha}

r1 := random(ZR)
r2 := random(ZR)
z1 := random(ZR) 
z2 := random(ZR)
tagk := random(ZR)

r := r1 + r2
idhash := H(id, ZR)

D1 := galphaa1 * (v ^ r)
D2 := (g ^ -alpha) * (v1 ^ r) * (g ^ z1)
D3 := gb ^ -z1
D4 := (v2 ^ r) * (g ^ z2)
D5 := gb ^ -z2
D6 := gb ^ r2
D7 := g ^ r1
K := (((u ^ idhash) * (w ^ tagk)) * h) ^ r1
        
sk := list{id, D1, D2, D3, D4, D5, D6, D7, K, tagk}
output := sk
END :: func:keygen


BEGIN :: func:encrypt
input := list{mpk, M, id}
mpk := expand{g, gb, ga1, ga2, gba1, gba2, tau1, tau2, tau1b, tau2b, w, u, h, eggalphaa1b}

s1 := random(ZR) 
s2:= random(ZR) 
t := random(ZR)
tagc := random(ZR)
s := s1 + s2
idhash2 := H(id, ZR)
        
C0 := M * (eggalphaa1b ^ s2)
C1 := gb ^ s
C2 := gba1 ^ s1
C3 := ga1 ^ s1
C4 := gba2 ^ s2
C5 := ga2 ^ s2
C6 := (tau1 ^ s1) * (tau2 ^ s2)
C7 := (((tau1b ^ s1) * (tau2b ^ s2)) * (w ^ -t))
E1 := (((u ^ idhash2) * (w ^ tagc)) * h) ^ t
E2 := g ^ t

ct := list{C0, C1, C2, C3, C4, C5, C6, C7, E1, E2, tagc}
output := ct
END :: func:encrypt


BEGIN :: func:decrypt
input := list{ct, sk}
sk := expand{id, D1, D2, D3, D4, D5, D6, D7, K, tagk}
ct := expand{C0, C1, C2, C3, C4, C5, C6, C7, E1, E2, tagc}

#tag := ((tagc - tagk)^-1)
A1 := e(C1, D1) * e(C2, D2) * e(C3, D3) * e(C4, D4) * e(C5, D5)
A2 := (e(C6, D6) * e(C7, D7))
A3 := A1 / A2
A4 := (e(E1, D7) / e(E2, K)) ^ ((tagc - tagk)^-1)
M := C0 / (A3 / A4)

output := M
END :: func:decrypt
