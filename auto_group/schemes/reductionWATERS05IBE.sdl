name := WATERS05IBE
setting := symmetric
l := 32


BEGIN :: types
l := Int
g := G1
A := G1
B := G1
C := G1
Z := GT
a := ZR
b := ZR
c := ZR
z := ZR
m := Int
k := Int
x := list{Int}
xprime := Int
y := list{ZR}
yprime := ZR
u := list{G1}
ID := Str
M0 := GT
M1 := GT
M := list{GT}
q := Int
p := Int
END :: types


BEGIN :: func:F
input := list{ID, xprime, x, m, k, p}

idh := H(ID, ZR)
id := intToBits(idh, l)

xi := init(Int)
BEGIN :: for
for{i := 0, l}
   xi := xi + (x#i ^ id#i)
END :: for

Fv := (p - (m * k)) + xprime + xi

output := Fv
END :: func:F


BEGIN :: func:J
input := list{ID, yprime, y}

idh := H(ID, ZR)
id := intToBits(idh, l)

yi := init(ZR)
BEGIN :: for
for{i := 0, l}
   yi := yi + (y#i ^ id#i)
END :: for

Jv := yprime + yi

output := Jv
END :: func:J


BEGIN :: func:K
input := list{ID, xprime, x}

idh := H(ID, ZR)
id := intToBits(idh, l)

xi := init(Int)
BEGIN :: for
for{i := 0, l}
   xi := xi + (x#i ^ id#i)
END :: for

cond := xprime + xi

BEGIN :: if
if { cond == 0 }
   Kv := 0
else
   Kv := 1
END :: if

output := Kv
END :: func:K


#Do we want to have it take in an instance of the assumption or generate the instance itself?
BEGIN :: func:setup
input := list{assumpKey, assumpVar}

assumpKey := expand{g, a, b, c, z}
assumpVar := expand{A, B, C, Z}

#p := random(Int) #we do not actually have access to these group parameters
#q := random(Int)

m := 4 * q
k := random(Int) #this is not totally in keeping with the reduction...can we specify random values from a certain range? do we need to?
xprime := random(Int)

BEGIN :: for
for{i := 0, l}
   x#i := random(ZR)
END :: for

yprime := random(ZR)
BEGIN :: for
for{i := 0, l}
   y#i := random(ZR)
END :: for

g1 := A
g2 := B

#”From the perspective of the adversary the distribution of the public parameters u, U is identical to the real construction” -> So should we generate them the way they do in the reduction or the way we do in the scheme so as not to confuse the SDL?

uexp := ((p - k*m) + xprime)
uprime := g2 ^ uexp #could we create just a random ZR element for the exponent since it doesn’t touch a pairing element?  or is it unsound to not follow the reduction exactly as written?
BEGIN :: for
for{i := 0, l}
   u#i := (g2 ^ x#i) * (g ^ y#i)
END :: for

reductionKey := list{g, g1, g2, uprime, u}
reductionParams := list{p, q, m, k, xprime, x, yprime, y}
output := list{reductionKey, reductionParams}
END :: func:setup


BEGIN :: func:queries
input := list{reductionKey, reductionParams, ID}

reductionKey := expand{g, g1, g2, uprime, u}
reductionParams := expand{p, q, m, k, xprime, x, yprime, y}

BEGIN :: if
if { K(ID, xprime) == 0 }
#simulator aborts??
else
   idh := H(ID, ZR)
   id := intToBits(idh, l)

   r := random(ZR)

   d1 := (g1 ^ (-1 / F(ID, xprime, m, p, j))) * (g ^ r)

   dotProd1 := init(G1)
   BEGIN :: for
   for{i := 0, l}
      dotProd1 := dotProd1 * (u#i ^ id#i)
   END :: for

   d0 := (g1 ^ (-1 * J(ID, yprime) / F(ID, xprime, m, p, j))) * ((uprime * dotProd1) ^ r)
   d := list{d0, d1} #private key
END :: if

output := d
END :: func:queries


BEGIN :: func:challenge
input := list{assumpVar, reductionKey, reductionParams, M, ID}

assumpVar := expand{A, B, C, Z}
reductionKey := expand{g, g1, g2, u, ut}
reductionParams := expand{p, q, m, k, xprime, x, yprime, y}

b := random(bool)

ct1 := Z * M#b
ct2 := C
ct3 := C ^ (J(ID, yprime, y))

ct := list{ct1, ct2, ct3}
output := ct
END :: func:challenge
