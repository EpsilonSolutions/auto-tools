name := waters05
setting := symmetric
l := 5
zz := 32


BEGIN :: types
alpha := ZR
m := list{ZR}
k := list{ZR}
mver := list{ZR}
kver := list{ZR}
ID := Str
M := Str
u := list{G1}
ub := list{G1}
u1b := list{G1}
u2b := list{G1}
A := GT
zz := Int
END :: types

BEGIN :: func:setup
input := None
 alpha := random(ZR) 
 h := random(G1)
 g := random(G1)
 A := (e(h, g) ^ alpha)

BEGIN :: for
for{i := 0, l}
 y0#i := random(ZR)
 u#i := g ^ y0#i
 ub#i := g ^ y0#i
END :: for

 y1t := random(ZR)
 y2t := random(ZR)

 u1t := g ^ y1t
 u2t := g ^ y2t

 u1b := g ^ y1t
 u2b := g ^ y2t

 msk := h ^ alpha
 mpk := list{g, A, u, ub, u1t, u2t, u1b, u2b} 
output := list{mpk, msk}
END :: func:setup

BEGIN :: func:keygen
input := list{mpk, msk, ID}
 mpk := expand{g, A, u, ub, u1t, u2t, u1b, u2b}
 
 k := stringToInt(ID, l, zz)
 dotProd := init(G1) 
BEGIN :: for
for{i := 0, l}
 dotProd := dotProd * (u#i ^ k#i)
END :: for

 r := random(ZR)
 k1 := msk * ((u1t * dotProd) ^ r)
 k2 := g ^ -r

 sk := list{k1, k2}
 output := sk
END :: func:keygen



BEGIN :: func:sign
input := list{mpk, sk, M}
 mpk := expand{g, A, u, ub, u1t, u2t, u1b, u2b}
 m := stringToInt(M, l, zz)
 sk := expand{k1, k2}
 s  := random(ZR)
 dotProd1 := init(G1)
BEGIN :: for
for{i := 0, l}
 dotProd1 := dotProd1 * (u#i ^ m#i)
END :: for

 S1 := k1 * ((u2t * dotProd1) ^ s)
 S2 := k2
 S3 := g ^ -s
 sig := list{S1, S2, S3}
output := sig
END :: func:sign

BEGIN :: func:verify
 input := list{mpk, ID, M, sig}
 mpk := expand{g, A, u, ub, u1t, u2t, u1b, u2b}
 sig := expand{S1, S2, S3}

 kver := stringToInt(ID, l, zz)
 mver := stringToInt(M, l, zz)
 dotProd2 := init(G1)
 dotProd3 := init(G1)
 
BEGIN :: for
for{i := 0, l}
  dotProd2 := dotProd2 * (ub#i ^ kver#i)
  dotProd3 := dotProd3 * (ub#i ^ mver#i)
END :: for

BEGIN :: if
if { ((e(S1, g) * e(S2, u1b * dotProd2) * e(S3, u2b * dotProd3)) == A) }
   output := True
else
   output := False
END :: if
END :: func:verify

BEGIN :: latex
S1 := S_1
S2 := S_2
S3 := S_3
g2 := g_2
u1b := \hat{u_1\prime}
u2b := \hat{u_2\prime}
ub := \hat{u}
END :: latex

# if { ((e(S1, g) * e(S2, u1b) * e(S2, dotProd2) * e(S3, u2b) * e(S3, dotProd3)) == A) }
