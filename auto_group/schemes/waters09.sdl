name := waters09
setting := symmetric

BEGIN :: types
policy_str := Str
S := list{Str}
M := GT
Cn := list
Dn := list
Kl := list
END :: types

BEGIN :: func:setup
input := None
g := random(G1)
alpha := random(ZR)
a := random(ZR)
egg := e(g, g)^alpha

galph := g^alpha
ga := g^a

msk := list{galph}
pk := list{g, egg, ga}

output := list{msk, pk}
END :: func:setup


BEGIN :: func:keygen
input := list{pk, msk, S} 
pk := expand{g, egg, ga}
msk := expand{galph}

t := random(ZR)
K := galph * (ga^t)
L := g^t
Y := len(S)

BEGIN :: for
for{y := 0, Y}
z := S#y
Kl#z := H(z, G1)^t
END :: for

sk := list{S, K, L, Kl}
output := sk
END :: func:keygen


BEGIN :: func:encrypt
input := list{pk, M, policy_str}
pk := expand{g, egg, ga}

policy := createPolicy(policy_str)
attrs := getAttributeList(policy)
s := random(ZR)
sh := calculateSharesList(s, policy)
Y := len(sh)
C := M * egg^s
Cpr := g ^ s

BEGIN :: for
for{y := 0, Y}
r := random(ZR)
k := attrs#y
x := sh#y
Cn#k := (ga ^ x#1) * (H(k, G1)^-r)
Dn#k := g^r
END :: for

ct := list{policy_str, C, Cpr, Cn, Dn}
output := ct
END :: func:encrypt


BEGIN :: func:decrypt
input := list{sk, ct}
ct := expand{policy_str, C, Cpr, Cn, Dn}
sk := expand{S, K, L, Kl}

policy := createPolicy(policy_str)
attrs  := prune(policy, S)
coeff := getCoefficients(policy)

Y := len(attrs)
A := { prod{y := attrs#1, Y} on ((e(Cn#y, L) * e(Kl#y, Dn#y) ) ^coeff#y) }

result0 := e(Cpr, K)
result1 := result0 / A
M := C / result1

output := M
END :: func:decrypt

