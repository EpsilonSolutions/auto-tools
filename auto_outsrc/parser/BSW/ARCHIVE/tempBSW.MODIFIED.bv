name := bsw07
setting := asymmetric

BEGIN :: types
policy_str := str
policy := object
attrs := list
sh := list
coeff := list
share := list
S := list
M := GT
Dj := list
Djp := list
Cr := list
Cpr := list
END :: types

BEGIN :: func:setup
input := None
g := random(G1)
g2 := random(G2)
alpha := random(ZR)
beta := random(ZR)

h := g^beta
f := g^(1/beta)
i := g2^alpha
egg := e(g, g2)^alpha

mk := list{beta, i}
pk := list{g, g2, h, f, egg}

output := list{mk, pk}
END :: func:setup


BEGIN :: func:keygen
input := list{pk, mk, S} 

r := random(ZR)
p0 := pk#1^r
D := (mk#1 * p0)^(1/mk#0)

Y := len(S)
BEGIN :: for
for{y := 0, Y}
s_y := random(ZR)
y0 := S#y
Dj#y0 := p0 * (H(y0, G2)^s_y) * mk#1
Djp#y0 := g^s_y
END :: for

sk := list{S, D, Dj, Djp}
output := sk
END :: func:keygen


BEGIN :: func:encrypt
input := list{pk, M, policy_str}
pk := expand{g, g2, h, f, egg}

policy := createPolicy(policy_str)
attrs := getAttributeList(policy)
s := random(ZR)
sh := calculateSharesDict(s, policy)
Y := len(sh)

Ctl := M * egg^s
C    := h ^ s

BEGIN :: for
for{y := 0, Y}
y1 := attrs#y
share#y1 := sh#y1
Cr#y1 := g ^ share#y1
Cpr#y1 := (H(y1, G2))^share#y1
END :: for

ct := list{policy_str, Ctl, C, Cr, Cpr}
output := ct
END :: func:encrypt


BEGIN :: func:decrypt
input := list{pk, sk, ct}
ct := expand{policy_str, Ctl, C, Cr, Cpr}
sk := expand{S, D, Dj, Djp}

policy := createPolicy(policy_str)
attrs  := prune(policy, S)
coeff := getCoefficients(policy)

Y := len(attrs)
A := { prod{y := attrs#1, Y} on ((e(Cr#y, Dj#y) / e(Djp#y, Cpr#y))^coeff#y) }

result0 := e(C, D) / A
M := Ctl / result0

output := M
END :: func:decrypt

