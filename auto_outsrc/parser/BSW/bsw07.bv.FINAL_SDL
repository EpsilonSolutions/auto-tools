name := bsw07
setting := symmetric

N := 2
secparam := 80

BEGIN :: types
policy_str := str
policy := object
attrs := list
sh := list
coeff := list
share := list
S := list
M := GT
Dj := list
Djp := list
Cr := list
Cpr := list
transformOutputList := list
END :: types

BEGIN :: func:setup
input := None
g := random(G1)
#g2 := random(G1)
alpha := random(ZR)
beta := random(ZR)

h := g^beta
f := g^(1/beta)
i := g^alpha
egg := e(g, g)^alpha

mk := list{beta, i}
pk := list{g, h, f, egg}

output := list{mk, pk}
END :: func:setup


BEGIN :: func:keygen
input := list{pk, mk, S} 
blindingFactorDBlinded := random(ZR)
SBlinded := S
zz := random(ZR)

pk := expand{g, h, f, egg}
mk := expand{beta, i}

r := random(ZR)
p0 := (pk#1^r)
D := ((mk#1 * p0)^(1 / mk#0))
DBlinded := D ^ (1/blindingFactorDBlinded)

Y := len(S)
BEGIN :: for
for{y := 0,Y}
s_y := random(ZR)
y0 := S#y
Dj#y0 := (p0 * (H(y0,G1)^s_y))
Djp#y0 := (g^s_y)
END :: for

DjpBlinded := Djp
DjBlinded := Dj
sk := list{SBlinded, DBlinded, DjBlinded, DjpBlinded}
skBlinded := list{SBlinded, DBlinded, DjBlinded, DjpBlinded}
output := list{blindingFactorDBlinded, skBlinded}
END :: func:keygen


BEGIN :: func:encrypt
input := list{pk, M, policy_str}
pk := expand{g, h, f, egg}

policy := createPolicy(policy_str)
attrs := getAttributeList(policy)
s := random(ZR)
sh := calculateSharesDict(s, policy)
Y := len(sh)

Ctl := M * egg^s
C    := h ^ s

BEGIN :: for
for{y := 0, Y}
y1 := attrs#y
share#y1 := sh#y1
Cr#y1 := g ^ share#y1
Cpr#y1 := (H(y1, G1))^share#y1
END :: for

ct := list{policy_str, Ctl, C, Cr, Cpr}
output := ct
END :: func:encrypt


BEGIN :: func:transform
input := list{pk, sk, ct}
ct := expand{policy_str, Ctl, C, Cr, Cpr}
sk := expand{S, D, Dj, Djp}
transformOutputList#0 := createPolicy(policy_str)
policy := transformOutputList#0
transformOutputList#1 := prune(policy, S)
attrs := transformOutputList#1
transformOutputList#2 := getCoefficients(policy)
coeff := transformOutputList#2
transformOutputList#3 := len(attrs)
Y := transformOutputList#3
transformOutputList#4 := { prod{y := attrs#1,Y} on ( e((Cr#y^coeff#y),Dj#y) * e((Djp#y^-coeff#y),Cpr#y) ) }
A := transformOutputList#4
transformOutputList#5 := e(C,D)
result0 := transformOutputList#5
output := transformOutputList
END :: func:transform

BEGIN :: func:decout
input := list{pk, sk, ct, transformOutputList, blindingFactorDBlinded}
ct := expand{policy_str, Ctl, C, Cr, Cpr}
sk := expand{S, D, Dj, Djp}
policy := transformOutputList#0
attrs := transformOutputList#1
coeff := transformOutputList#2
Y := transformOutputList#3
A := (transformOutputList#4) 
result0 := (transformOutputList#5 ^ (blindingFactorDBlinded) ) 
result1 := (result0 * (A^-1))
M := (Ctl * (result1^-1))
output := M
END :: func:decout

