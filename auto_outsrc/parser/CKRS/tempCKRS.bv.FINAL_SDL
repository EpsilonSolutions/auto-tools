name := ibeckrs09 
setting := asymmetric

N := 2
secparam := 80

BEGIN :: types
n := ZR
l := ZR
M := GT
mpk := list
sk := list
ct := list
hl := list
gl := list
#c := list
#d := list
z := list
#testList := list
id := str
transformOutputList := list
END :: types

BEGIN :: func:setup
input := list{n, l}
alpha := random(ZR)
t1 := random(ZR)
t2 := random(ZR)
t3 := random(ZR)
t4 := random(ZR)
g := random(G1) 
#h := random(G1)
h := random(G2)
omega := e(g, h)^(t1 * (t2 * alpha))
BEGIN :: for
for{y := 0, n}
z#y := random(ZR) # n of these
gl#y := g ^ z#y
hl#y := h ^ z#y
END :: for

v1 := g ^ t1
v2 := g ^ t2
v3 := g ^ t3
v4 := g ^ t4

mpk := list{omega, g, h, gl, hl, v1, v2, v3, v4, n, l}
msk := list{alpha, t1, t2, t3, t4}

output := list{mpk, msk}
END :: func:setup


BEGIN :: func:extract
input := list{mpk, msk, id}
blindingFactord0Blinded := random(ZR)
blindingFactord1Blinded := random(ZR)
blindingFactord2Blinded := random(ZR)
blindingFactor0Blinded := random(ZR)
blindingFactor1Blinded := random(ZR)
idBlinded := id
zz := random(ZR)
mpk := expand{omega, g, h, gl, hl, v1, v2, v3, v4, n, l}
msk := expand{alpha, t1, t2, t3, t4}

r1 := random(ZR)
r2 := random(ZR)
hID := strToId(mpk, id)
hashIDDotProd := (prod{y := 0,n} on (hl#y^hID#y))
hashID := (hl#0 * hashIDDotProd)


d0 := (h^((r1 * (t1 * t2)) + (r2 * (t3 * t4))))
d0Blinded := d0 ^ (1/blindingFactord0Blinded)

halpha := (h^-alpha)
hashID2r1 := (hashID^-r1)



d1 := ((halpha^t2) * (hashID2r1^t2))
d1Blinded := d1 ^ (1/blindingFactord1Blinded)


d2 := ((halpha^t1) * (hashID2r1^t1))
d2Blinded := d2 ^ (1/blindingFactord2Blinded)

hashID2r2 := (hashID^-r2)


d3 := (hashID2r2^t4)
d3Blinded := d3 ^ (1/blindingFactor0Blinded)


d4 := (hashID2r2^t3)
d4Blinded := d4 ^ (1/blindingFactor1Blinded)







sk := list{idBlinded, d0Blinded, d1Blinded, d2Blinded, d3Blinded, d4Blinded}
skBlinded := list{idBlinded, d0Blinded, d1Blinded, d2Blinded, d3Blinded, d4Blinded}
output := list{blindingFactord0Blinded, blindingFactord1Blinded, blindingFactord2Blinded, blindingFactor0Blinded, blindingFactor0Blinded, blindingFactor1Blinded, blindingFactor1Blinded, skBlinded}
END :: func:extract


BEGIN :: func:encrypt
input := list{mpk, M, id}
mpk := expand{omega, g, h, gl, hl, v1, v2, v3, v4, n, l}

s := random(ZR)
s1 := random(ZR)
s2 := random(ZR)

hID1 := strToId(mpk, id) # list <-: strToId(list, str)
hashID1DotProd := (prod{y := 0, n} on { gl#y ^ hID1#y })
hashID1 := gl#0 * hashID1DotProd

cpr := (omega ^ s) * M
c0 := hashID1 ^ s
c1 := v1 ^ (s - s1)
c2 := v2 ^ s1
c3 := v3 ^ (s - s2)
c4 := v4 ^ s2

ct := list{c0, c1, c2, c3, c4, cpr}
output := ct
END :: func:encrypt

BEGIN :: func:transform
input := list{sk, ct}
sk := expand{id, d0, d1, d2, d3, d4}
ct := expand{c0, c1, c2, c3, c4, cpr}
transformOutputList#0 := e(c0,d0)
transformOutputList#1 := e(c1,d1)
transformOutputList#2 := e(c2,d2)
transformOutputList#3 := e(c3,d3)
transformOutputList#4 := e(c4,d4)
output := transformOutputList
END :: func:transform

BEGIN :: func:decout
input := list{sk, ct, transformOutputList, blindingFactord0Blinded, blindingFactord1Blinded, blindingFactord2Blinded, blindingFactor0Blinded, blindingFactor0Blinded, blindingFactor1Blinded, blindingFactor1Blinded}
sk := expand{id, d0, d1, d2, d3, d4}
ct := expand{c0, c1, c2, c3, c4, cpr}
result := (transformOutputList#0 ^ (blindingFactord0Blinded) )  * (transformOutputList#1 ^ (blindingFactord1Blinded) )  * (transformOutputList#2 ^ (blindingFactord2Blinded) )  * (transformOutputList#3 ^ (blindingFactor0Blinded) )  * (transformOutputList#4 ^ (blindingFactor1Blinded) ) 
M := (cpr * result)
output := M
END :: func:decout

