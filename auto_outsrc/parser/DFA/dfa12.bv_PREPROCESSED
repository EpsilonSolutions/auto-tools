name := dfa12
setting := symmetric

N := 2
secparam := 80

BEGIN :: types
M := GT
alphabet := list{int}
mpk := list
msk := list
sk := list
ct := list
Q := list
T := list
Ti := list
F := list
Klist := list{G1, G1, G1}
key := int
K := list{Klist}
KendList1 := list{G1}
KendList2 := list{G1}

B := list{GT}
Clist := list{G1, G1}
C := list{Clist}
D := list{G1}
D#0 := G1
h := list{G1}
x := int
st := int
j := int
END :: types


BEGIN :: func:setup
input := list{alphabet}
g := random(G1)
z := random(G1)
hstart := random(G1)
hend := random(G1)

A := len(alphabet)
BEGIN :: for
for{i := 0,A}
a := string(alphabet#i)
h#a? := random(G1)
END :: for

alpha := random(ZR)
egg := (e(g,g)^alpha)
msk := (g^-alpha)
mpk := list{egg, g, z, h, hstart, hend}

output := list{mpk, msk}
END :: func:setup


BEGIN :: func:keygen
input := list{mpk, msk, dfaM}
mpk := expand{egg, g, z, h, hstart, hend}
dfaM := expand{Q, S, T, q0, F}

qlen := len(Q)
BEGIN :: for
for{i := 0,qlen+1}
D#i := random(G1)
END :: for

rstart := random(ZR)
Kstart1 := (D#0 * (hstart^rstart))
Kstart2 := (g^rstart)

Tlen := len(T)
BEGIN :: for
for{i := 0,Tlen}
r := random(ZR)
t := T#i
x := t#0
y := t#1
tt := string(t#2)
key := hashToInt(t)

K#key := init(list)
Klist := init(list)
Klist#1? := ((D#x^-1) * (z^r))
Klist#2? := (g^r)
Klist#3? := (D#y * (h#tt^r))
K#key := copy(Klist)
END :: for


Flen := len(F)
BEGIN :: for
for{i := 0,Flen}
x := F#i
rx := random(ZR)
KendList1#x := (msk * (D#x * (hend^rx)))
KendList2#x := (g^rx)

END :: for

sk := list{Kstart1, Kstart2, K, KendList1, KendList2, dfaM}
output := sk
END :: func:keygen


BEGIN :: func:encrypt
input := list{mpk, w, M}
mpk := expand{egg, g, z, h, hstart, hend}
l := len(w)

BEGIN :: for
for{i := 0,l+1}
s#i := random(ZR)
END :: for

Cm := (M * (egg^s#l))

C#0 := init(list)

C#0#1? := (g^s#0)
C#0#2? := (hstart^s#0)

BEGIN :: for
for{i := 1,l+1}
a := string(w#i)
C#i := init(list)
C#i#1? := (g^s#i)
C#i#2? := ((h#a^s#i) * (z^s#i-1?))
END :: for

Cend1 := (g^s#l)
Cend2 := (hend^s#l)

ct := list{Cm, C, Cend1, Cend2, w}
output := ct
END :: func:encrypt



BEGIN :: func:decrypt
input := list{sk, ct}
sk := expand{Kstart1, Kstart2, K, KendList1, KendList2, dfaM}
ct := expand{Cm, C, Cend1, Cend2, w}
l := len(w)

BEGIN :: if
if {accept(dfaM, w) == False}
output := False
END :: if

Ti := getTransitions(dfaM, w)
B#0 := (e(C#0#1?,Kstart1) * (e(C#0#2?,Kstart2)^-1))
BEGIN :: for
for{i := 1,l+1}
st := hashToInt(Ti#i)
Klist := K#st
j := (i - 1)
result0 := (e(C#j#1?,Klist#1?) * ((e(C#i#2?,Klist#2?)^-1) * e(C#i#1?,Klist#3?)))
B#i? := (B#i-1? * result0)
END :: for
x := getAcceptState(Ti)

result1 := ((e(Cend1,KendList1#x)^-1) * e(Cend2,KendList2#x))
Bend := (B#l * result1)
M := (Cm / Bend)
output := M
END :: func:decrypt
