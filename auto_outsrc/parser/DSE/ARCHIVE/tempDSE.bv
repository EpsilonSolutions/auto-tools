name := dsewaters09
setting := asymmetric

N := 2
secparam := 80

BEGIN :: types
M := GT
C := list
D := list
mpk := list
msk := list
sk := list
ct := list

END :: types

BEGIN :: func:setup
input := None
g := random(G1)
g2 := random(G2)
w := random(G1)
w2 := random(G2) 
u := random(G1)
u2 := random(G2)
h := random(G1)
hus2 := random(G2)
v := random(G1)
vus2 := random(G2)
v1 := random(G1)
v1us2 := random(G2)
v2 := random(G1)
v2us2 := random(G2)
a1 := random(ZR)
a2 := random(ZR) 
b := random(ZR) 
alpha := random(ZR)
        
gb := g ^ b
gbus2 := g2 ^ b
ga1 := g ^ a1
ga2 := g ^ a2
gba1 := gb ^ a1
gba1us2 := gbus2 ^ a1
gba2 := gb ^ a2
gba2us2 := gbus2 ^ a2
tau1 := v * (v1 ^ a1)
tau1us2 := vus2 * (v1us2 ^ a1)
tau2 := v * (v2 ^ a2)
tau2us2 := vus2 * (v2us2 ^ a2)
tau1b := tau1 ^ b
tau1bus2 := tau1us2 ^ b
tau2b := tau2 ^ b
tau2bus2 := tau2us2 ^ b
egga := e(g, g2)^(alpha * (a1 * b)) 
galpha := g2 ^ alpha
galphausa1 := galpha ^ a1

mpk := list{g, g2, gb, gbus2, ga1, ga2, gba1, gba1us2, gba2, gba2us2, tau1, tau1us2, tau2, tau2us2, tau1b, tau1bus2, tau2b, tau2bus2, w, w2, u, u2, h, hus2, egga}
msk := list{galpha, galphausa1, v, vus2, v1, v1us2, v2, v2us2, alpha}

output := list{mpk, msk}
END :: func:setup


BEGIN :: func:keygen
input := list{mpk, msk, id}
mpk := expand{g, g2, gb, gbus2, ga1, ga2, gba1, gba1us2, gba2, gba2us2, tau1, tau1us2, tau2, tau2us2, tau1b, tau1bus2, tau2b, tau2bus2, w, w2, u, u2, h, hus2, egga}
msk := expand{galpha, galphausa1, v, vus2, v1, v1us2, v2, v2us2, alpha}

r1 := random(ZR)
r2 := random(ZR)
z1 := random(ZR) 
z2 := random(ZR)
tagusk := random(ZR)

r := r1 + r2
idushash := H(id, ZR)

D1 := galphausa1 * (vus2 ^ r)
D2 := (g2 ^ -alpha) * (v1us2 ^ r) * (g2 ^ z1)
D3 := gbus2 ^ -z1
D4 := (v2us2 ^ r) * (g2 ^ z2)
D5 := gbus2 ^ -z2
D6 := gbus2 ^ r2
D7 := g2 ^ r1
K := (((u2 ^ idushash) * (w2 ^ tagusk)) * hus2) ^ r1
        
sk := list{id, D1, D2, D3, D4, D5, D6, D7, K, tagusk}
output := sk
END :: func:keygen


BEGIN :: func:encrypt
input := list{mpk, M, id}
mpk := expand{g, g2, gb, gbus2, ga1, ga2, gba1, gba1us2, gba2, gba2us2, tau1, tau1us2, tau2, tau2us2, tau1b, tau1bus2, tau2b, tau2bus2, w, w2, u, u2, h, hus2, egga}

s1 := random(ZR) 
s2:= random(ZR) 
t := random(ZR)
tagusc := random(ZR)
s := s1 + s2
idushash2 := H(id, ZR)
        
C0 := M * (egga ^ s2)
C1 := gb ^ s
C2 := gba1 ^ s1
C3 := ga1 ^ s1
C4 := gba2 ^ s2
C5 := ga2 ^ s2
C6 := (tau1 ^ s1) * (tau2 ^ s2)
C7 := (((tau1b ^ s1) * (tau2b ^ s2)) * (w ^ -t))
E1 := (((u ^ idushash2) * (w ^ tagusc)) * h) ^ t
E2 := g ^ t

ct := list{C1, C2, C3, C4, C5, C6, C7, E1, E2, tagusc}
output := ct
END :: func:encrypt

BEGIN :: func:decrypt
input := list{ct, sk}
sk := expand{id, D1, D2, D3, D4, D5, D6, D7, K, tagusk}
ct := expand{C1, C2, C3, C4, C5, C6, C7, E1, E2, tagusc}

tag := ( (tagusc - tagusk) ^ -1)
A1 := (e(C1, D1) * (e(C2, D2) * (e(C3, D3) * (e(C4, D4) * e(C5, D5)))))
A2 := (e(C6, D6) * e(C7, D7))
A3 := A1 / A2
A4 := (e(E1, D7) / e(E2, K)) ^ tag
M := C0 / (A3 / A4)
output := M
END :: func:decrypt
