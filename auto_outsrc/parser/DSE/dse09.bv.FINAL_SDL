name := dsewaters09
setting := symmetric
short := keys

N := 2
secparam := 80

#C := list
BEGIN :: types
id := str
M := GT
D := list
mpk := list
msk := list
sk := list
ct := list
tag := ZR
transformOutputList := list
END :: types

BEGIN :: func:setup
input := None
g := random(G1)
w := random(G1) 
u := random(G1)
h := random(G1)
v := random(G1)
v1 := random(G1)
v2 := random(G1)
a1 := random(ZR)
a2 := random(ZR) 
b := random(ZR) 
alpha := random(ZR)
        
gb := g ^ b
ga1 := g ^ a1
ga2 := g ^ a2
gba1 := gb ^ a1
gba2 := gb ^ a2
tau1 := v * (v1 ^ a1)
tau2 := v * (v2 ^ a2)        
tau1b := tau1 ^ b
tau2b := tau2 ^ b
egga := e(g, g)^(alpha * (a1 * b)) 
galpha := g ^ alpha
galpha_a1 := galpha ^ a1

mpk := list{g, gb, ga1, ga2, gba1, gba2, tau1, tau2, tau1b, tau2b, w, u, h, egga}
msk := list{galpha, galpha_a1, v, v1, v2, alpha}

output := list{mpk, msk}
END :: func:setup


BEGIN :: func:keygen
input := list{mpk, msk, id}
blindingFactorD1Blinded := random(ZR)
blindingFactorD2Blinded := random(ZR)
blindingFactor0Blinded := random(ZR)
idBlinded := id
zz := random(ZR)
mpk := expand{g, gb, ga1, ga2, gba1, gba2, tau1, tau2, tau1b, tau2b, w, u, h, egga}
msk := expand{galpha, galpha_a1, v, v1, v2, alpha}

r1 := random(ZR)
r2 := random(ZR)
z1 := random(ZR)
z2 := random(ZR)
tag_k := random(ZR)
tag_kBlinded := tag_k

r := (r1 + r2)
id_hash := H(idBlinded,ZR)

D1 := (galpha_a1 * (v^r))
D1Blinded := (D1^(1 / blindingFactorD1Blinded))
D2 := ((g^-alpha) * ((v1^r) * (g^z1)))
D2Blinded := (D2^(1 / blindingFactorD2Blinded))
D3 := (gb^-z1)
D3Blinded := D3
D4 := ((v2^r) * (g^z2))
D4Blinded := (D4^(1 / blindingFactor0Blinded))
D5 := (gb^-z2)
D5Blinded := D5
D6 := (gb^r2)
D6Blinded := D6
D7 := (g^r1)
D7Blinded := D7
K := ((((u^id_hash) * (w^tag_kBlinded)) * h)^r1)
KBlinded := K

sk := list{idBlinded, D1Blinded, D2Blinded, D3Blinded, D4Blinded, D5Blinded, D6Blinded, D7Blinded, KBlinded, tag_kBlinded}
skBlinded := list{idBlinded, D1Blinded, D2Blinded, D3Blinded, D4Blinded, D5Blinded, D6Blinded, D7Blinded, KBlinded, tag_kBlinded}
output := list{blindingFactorD1Blinded, blindingFactorD2Blinded, blindingFactor0Blinded, blindingFactor0Blinded, skBlinded}
END :: func:keygen


BEGIN :: func:encrypt
input := list{mpk, M, id}
mpk := expand{g, gb, ga1, ga2, gba1, gba2, tau1, tau2, tau1b, tau2b, w, u, h, egga}

s1 := random(ZR) 
s2:= random(ZR) 
t := random(ZR)
tag_c := random(ZR)
s := s1 + s2
id_hash2 := H(id, ZR)
        
C#0 := M * (egga ^ s2)
C#1 := gb ^ s
C#2 := gba1 ^ s1
C#3 := ga1 ^ s1
C#4 := gba2 ^ s2
C#5 := ga2 ^ s2
C#6 := (tau1 ^ s1) * (tau2 ^ s2)
C#7 := (((tau1b ^ s1) * (tau2b ^ s2)) * (w ^ -t))
E1 := (((u ^ id_hash2) * (w ^ tag_c)) * h) ^ t
E2 := g ^ t

ct := list{C, E1, E2, tag_c}
output := ct
END :: func:encrypt

BEGIN :: func:transform
input := list{ct, sk}
sk := expand{id, D1, D2, D3, D4, D5, D6, D7, K, tag_k}
ct := expand{C, E1, E2, tag_c}
transformOutputList#0 := ((tag_c - tag_k)^-1)
tag := transformOutputList#0
transformOutputList#1 := e(C#1,D1)
transformOutputList#2 := e(C#2,D2)
transformOutputList#3 := e(C#3,D3) * e(C#5,D5)
transformOutputList#4 := e(C#4,D4)
transformOutputList#5 := e(C#6,D6) * e(C#7,D7)
A2 := transformOutputList#5
transformOutputList#6 := e(E1,D7) * e((E2^-1),K)
A4 := transformOutputList#6
transformOutputList#7 := (A4^tag)
result0 := transformOutputList#7
output := transformOutputList
END :: func:transform

BEGIN :: func:decout
input := list{ct, sk, transformOutputList, blindingFactorD1Blinded, blindingFactorD2Blinded, blindingFactor0Blinded, blindingFactor0Blinded}
sk := expand{id, D1, D2, D3, D4, D5, D6, D7, K, tag_k}
ct := expand{C, E1, E2, tag_c}
tag := transformOutputList#0
A1 := (transformOutputList#1 ^ (blindingFactorD1Blinded) )  * (transformOutputList#2 ^ (blindingFactorD2Blinded) )  * (transformOutputList#3)  * (transformOutputList#4 ^ (blindingFactor0Blinded) ) 
A2 := (transformOutputList#5) 
A3 := (A1 * (A2^-1))
A4 := (transformOutputList#6) 
result0 := transformOutputList#7
result1 := (A3 * (result0^-1))
M := (C#0 * (result1^-1))
output := M
END :: func:decout

