name := hibe_bb04
setting := asymmetric

N := 2
secparam := 80

BEGIN :: types
mpk := list
mk := list
pk := list
sk := list
d := list
id := str
M := GT
C := list
ct := list
#j := int
transformOutputList := list
END :: types

BEGIN :: func:setup
input := list{l, z}

alpha := random(ZR) 
beta := random(ZR)
g := random(G1)
gb := random(G2)
g1 := g ^ alpha
g1b := gb ^ alpha

BEGIN :: for
for{y := 0, l}
delta#y := random(ZR)
h#y := g ^ delta#y
hb#y := gb ^ delta#y
END :: for

g0b := gb ^ (alpha * beta)
v := e(g, g0b)
    
mpk := list{g, g1, h, gb, g1b, hb, v, l, z}
mk := list{g0b, None}
output := list{mpk, mk}
END :: func:setup


BEGIN :: func:keygen
#input := list{mpk, mk, id, j}
input := list{mpk, mk, id}
blindingFactor0Blinded := random(ZR)
zz := random(ZR)
mpk := expand{g, g1, h, gb, g1b, hb, v, l, z}
mk := expand{g0b, dummyVar}

Id := stringToID(z, 5, id)
BEGIN :: for
for{y := 0, 5}
r#y := random(ZR)
d#y := gb ^ r#y
END :: for

dBlinded := d

d0DotProdCalc := (prod{y := 0,5} on (((g1b^Id#y) * hb#y)^r#y))
d0 := (g0b * d0DotProdCalc)
d0Blinded := (d0^(1 / blindingFactor0Blinded))

pk := list{id, None}
pkBlinded := pk
sk := list{d0Blinded, dBlinded}
skBlinded := list{d0Blinded, dBlinded}
output := list{pkBlinded, blindingFactor0Blinded, skBlinded}
END :: func:keygen


BEGIN :: func:encrypt
input := list{mpk, pk, M}        
mpk := expand{g, g1, h, gb, g1b, hb, v, l, z}
#pk := expand{id, j}
pk := expand{id, dummyVar2}
s := random(ZR)
A := M * (v ^ s)
B :=  g ^ s

BEGIN :: for
for{y := 0, 5}
C#y := (((g1 ^ Id2#y) * h#y) ^ s)
END :: for
            
#ct := list{A, B, C, j}
ct := list{A, B, C}
output := ct
END :: func:encrypt


BEGIN :: func:transform
input := list{pk, sk, ct}
sk := expand{d0, d}
ct := expand{A, B, C}
transformOutputList#0 := e(C#0,d#0) * e(C#1,d#1) * e(C#2,d#2) * e(C#3,d#3) * e(C#4,d#4)
D := transformOutputList#0
transformOutputList#1 := e(B,d0)
denominator := transformOutputList#1
output := transformOutputList
END :: func:transform

BEGIN :: func:decout
input := list{pk, sk, ct, transformOutputList, blindingFactor0Blinded}
sk := expand{d0, d}
ct := expand{A, B, C}
D := (transformOutputList#0 ) )
denominator := (transformOutputList#1 ^ (blindingFactor0Blinded) )
fraction := (D * (denominator^-1))
M := (A * fraction)
output := M
END :: func:decout

