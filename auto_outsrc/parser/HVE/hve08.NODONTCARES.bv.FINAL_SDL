name := hve08
setting := asymmetric

N := 2
secparam := 80

BEGIN :: types
Message := GT
Message2 := GT
n := int
YVectorBlinded := list
LVectorBlinded := list
blindingFactorYVectorBlinded := list
blindingFactorLVectorBlinded := list
transformOutputList := list
END :: types

BEGIN :: func:setup
input := n

g1 := random(G1)
g2 := random(G2)
egg := e(g1, g2)
y := random(ZR)
Y := egg ^ y

BEGIN :: for
for{i := 0, n}
t#i := random(ZR)
v#i := random(ZR)
r#i := random(ZR)
m#i := random(ZR)
T#i := g1 ^ t#i
V#i := g1 ^ v#i
R#i := g1 ^ r#i
M#i := g1 ^ m#i
END :: for

pk := list{g1, g2, n, Y, T, V, R, M}
msk := list{y, t, v, r, m}
output := list{pk, msk}
END :: func:setup

BEGIN :: func:keygen
input := list{pk, msk, yVector}
zz := random(ZR)
g1 := pk#0
g2 := pk#1
n := pk#2
y := msk#0

numNonDontCares := init(0)
BEGIN :: for
for{i := 0, n}
BEGIN :: if
if { yVector#i != 2 }
numNonDontCares := numNonDontCares + 1
END :: if
END :: for

#BEGIN :: if
#if { numNonDontCares == 0 }
#sk := g2 ^ y
#output := sk
#return := output
#END :: if

sumUSaisUSsoFar := init(0)

endForLoop := numNonDontCares - 1
BEGIN :: for
for{i := 0, endForLoop}
a#i := random(ZR)
sumUSaisUSsoFar := sumUSaisUSsoFar + a#i
END :: for

a#numNonDontCares-1? := (y - sumUSaisUSsoFar)

currentUSaUSindex := init(0)

BEGIN :: for
for{i := 0, n}
BEGIN :: if
if { yVector#i == 0 }
YVector#i := g2 ^ (a#currentUSaUSindex / msk#3#i)
LVector#i := g2 ^ (a#currentUSaUSindex / msk#4#i)
currentUSaUSindex := currentUSaUSindex + 1
END :: if
BEGIN :: if
if { yVector#i == 1 }
YVector#i := g2 ^ (a#currentUSaUSindex / msk#1#i)
LVector#i := g2 ^ (a#currentUSaUSindex / msk#2#i)
currentUSaUSindex := currentUSaUSindex + 1
END :: if
BEGIN :: if
if { yVector#i == 2 }
YVector#i := init(G2)
LVector#i := init(G2)
END :: if
END :: for

yLength := len(LVector)
LVectorKeysSuffix := keys(LVector)
BEGIN :: for
for{y := 0, yLength}
LVectorKeyLoopVar := LVectorKeysSuffix#y
blindingFactorLVectorBlinded#y := random(ZR)
LVectorBlinded#LVectorKeyLoopVar := LVector#LVectorKeyLoopVar ^ (1/blindingFactorLVectorBlinded#y)
END :: for
yLength := len(YVector)
YVectorKeysSuffix := keys(YVector)
BEGIN :: for
for{y := 0,yLength}
YVectorKeyLoopVar := YVectorKeysSuffix#y
blindingFactorYVectorBlinded#y := random(ZR)
YVectorBlinded#YVectorKeyLoopVar := (YVector#YVectorKeyLoopVar^(1 / blindingFactorYVectorBlinded#y))
END :: for
sk2 := list{YVectorBlinded, LVectorBlinded}
sk2Blinded := list{YVectorBlinded, LVectorBlinded}
output := list{blindingFactorYVectorBlinded, blindingFactorLVectorBlinded, sk2Blinded}
END :: func:keygen

BEGIN :: func:encrypt
input := list{Message, xVector, pk}
g1 := pk#0
n := pk#2
Y := pk#3

s := random(ZR)

BEGIN :: for
for{i := 0, n}
sUSi#i := random(ZR)
END :: for

omega := Message * (Y ^ (-s))
C0 := g1 ^ s

BEGIN :: for
for{i := 0, n}
BEGIN :: if
if { xVector#i == 0 }
XVector#i := pk#6#i ^ (s - sUSi#i)
WVector#i := pk#7#i ^ (sUSi#i)
END :: if
BEGIN :: if
if { xVector#i == 1 }
XVector#i := pk#4#i ^ (s - sUSi#i)
WVector#i := pk#5#i ^ (sUSi#i)
END :: if
END :: for

CT := list{omega, C0, XVector, WVector}
output := CT
END :: func:encrypt

BEGIN :: func:transform
input := list{CT, sk}
CT := expand{omega, C0, XVector, WVector}
sk := expand{YVector, LVector}
transformOutputList#0 := len(YVector)
n := transformOutputList#0
BEGIN :: for
for{i := 0,n}
BEGIN :: if
if {{YVector#i != init(G2)} and {LVector#i != init(G2)}}
transformOutputList#1000+7*i? := e(XVector#i,YVector#i)
intermediateResults := transformOutputList#1000+7*i?
transformOutputList#1001+7*i? := e(WVector#i,LVector#i)
intermediateResults := transformOutputList#1001+7*i?
END :: if
END :: for
output := transformOutputList
END :: func:transform

BEGIN :: func:decout
input := list{CT, sk, transformOutputList, blindingFactorYVectorBlinded, blindingFactorLVectorBlinded}
CT := expand{omega, C0, XVector, WVector}
sk := expand{YVector, LVector}
dotProd := init(GT)
n := transformOutputList#0
BEGIN :: for
for{i := 0,n}
BEGIN :: if
if {{YVector#i != init(G2)} and {LVector#i != init(G2)}}
intermediateResults := (transformOutputList#1000+7*i? ^ (blindingFactorYVectorBlinded#i) )  * (transformOutputList#1001+7*i? ^ (blindingFactorLVectorBlinded#i) ) 
dotProd := (dotProd * intermediateResults)
END :: if
END :: for
Message2 := (omega * dotProd)
output := Message2
END :: func:decout

