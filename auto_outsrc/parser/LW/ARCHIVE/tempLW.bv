name := lw10
setting := asymmetric

N := 2
secparam := 80

BEGIN :: types
msk := list
pk1 := list{GT, G2}
pk := list{pk1, None}
sk := list
ct := list
policyusstr := str
policy := object
attrs := list
sussh := list
wussh := list
coeff := list
share := list
authS := list
userS := list
M := GT
K := list
C1 := list
C2 := list
C3 := list
gid := str
END :: types

BEGIN :: func:setup
input := None
g := random(G1)
gus2 := random(G2)
gpk := list{g, gus2}

output := gpk
END :: func:setup

BEGIN :: func:authsetup
input := list{gpk, authS}
gpk := expand{g, gus2}

Y := len(authS)
BEGIN :: for
for{i := 0, Y}
alpha := random(ZR)
y := random(ZR)
z := authS#i
eggalph := e(g, gus2)^alpha
g2y := gus2^y
msk#z := list{alpha, y}
pk#z := list{eggalph, g2y}
END :: for

output := list{msk, pk}
END :: func:authsetup

BEGIN :: func:keygen
input := list{gpk, msk, gid, userS}
gpk := expand{g, gus2}
h := H(gid, G1)

Y := len(userS)
BEGIN :: for
for{i := 0, Y}
z := userS#i
K#z := (g ^ msk#z#0) * (h ^ msk#z#1)
END :: for

sk := list{gid, userS, K}
output := sk
END :: func:keygen

BEGIN :: func:encrypt
input := list{pk, gpk, M, policyusstr}
gpk := expand{g, gus2}

policy := createPolicy(policyusstr)
attrs := getAttributeList(policy)
s := random(ZR)
w := 0
sussh := calculateSharesDict(s, policy)
wussh := calculateSharesDict(w, policy)
Y := len(sussh)
egg := e(g,gus2)
C0 := (M * (egg^s))

BEGIN :: for
for{y := 0, Y}
r := random(ZR)
k := attrs#y
C1#k := (egg ^ sussh#k) * (pk#k#0 ^ r)
C2#k := gus2^r
C3#k := (pk#k#1 ^ r) * (gus2 ^ wussh#k)
END :: for

ct := list{policyusstr, C0, C1, C2, C3}
output := ct
END :: func:encrypt

BEGIN :: func:decrypt
input := list{gpk, sk, ct}
gpk := expand{g, gus2}
ct := expand{policyusstr, C0, C1, C2, C3}
sk := expand{gid, userS, K}

policy := createPolicy(policyusstr)
attrs  := prune(policy, userS)
coeff := getCoefficients(policy)
husgid := H(gid, G1)

Y := len(attrs)
A := { prod{y := attrs#1, Y} on (((C1#y * e(husgid, C3#y)) * e(K#y, C3#y) / e(K#y, C2#y))^coeff#y) }

M := C0 / A
output := M
END :: func:decrypt

# change rule for moving exp into a variable : only if it's a negative exponent! nothing else!
