name := lw10
setting := asymmetric

BEGIN :: types
gid := str
sk := list
ct := list
policy_str := str
authS := list{str}
userS := list{str}
M := GT
K := list
C1 := list
C2 := list
C3 := list
END :: types

BEGIN :: func:setup
input := None
gG1 := random(G1)
gG2 := random(G2)
gpk := list{gG1, gG2}
output := gpk
END :: func:setup

BEGIN :: func:authsetup
input := list{gpk, authS}
gG1 := random(G1)
gG2 := random(G2)
gpk := expand{gG1, gG2}
Y := len(authS)
BEGIN :: for
for{i := 0,Y}
alpha := random(ZR)
y := random(ZR)
z := authS#i
eggalph := (e(gG1,gG2)^alpha)
gy := (gG2^y)
msk#z := list{alpha, y}
pk#z := list{eggalph, gy}
END :: for
output := list{msk, pk}
END :: func:authsetup

BEGIN :: func:keygen
input := list{gpk, msk, gid, userS}
gpk := expand{gG1, gG2}
h := H(gid,G1)
Y := len(userS)
BEGIN :: for
for{i := 0,Y}
z := userS#i
K#z := ((gG1^msk#z#0) * (h^msk#z#1))
END :: for
sk := list{gid, K}
output := sk
END :: func:keygen

BEGIN :: func:encrypt
input := list{pk, gpk, M, policy_str}
gpk := expand{gG1, gG2}
policy := createPolicy(policy_str)
attrs := getAttributeList(policy)
s := random(ZR)
w := 0
s_sh := calculateSharesDict(s, policy)
w_sh := calculateSharesDict(w, policy)
Y := len(s_sh)
egg := e(gG1,gG2)
C0 := (M * (egg^s))
BEGIN :: for
for{y := 0,Y}
r := random(ZR)
k := attrs#y
C1#k := ((egg^s_sh#k) * (pk#k#0^r))
C2#k := (gG2^r)
C3#k := ((pk#k#1^r) * (gG2^w_sh#k))
END :: for
ct := list{policy_str, C0, C1, C2, C3}
output := ct
END :: func:encrypt

BEGIN :: func:decrypt
input := list{sk, userS, ct}
ct := expand{policy_str, C0, C1, C2, C3}
sk := expand{gid, K}
policy := createPolicy(policy_str)
attrs := prune(policy, userS)
coeff := getCoefficients(policy)
h_gid := H(gid,G1)
Y := len(attrs)
dotProd := init(GT)
BEGIN :: for
for{y := 0,Y}
kDecrypt := GetString(attrs#y)
result0 := e(h_gid,C3#kDecrypt)
numerator := ((result0^coeff#kDecrypt) * (C1#kDecrypt^coeff#kDecrypt))
denominator := ((e(K#kDecrypt,C2#kDecrypt))^coeff#kDecrypt)
fraction := (numerator / denominator)
dotProd := (dotProd * fraction)
END :: for
M := (C0 / dotProd)
output := M
END :: func:decrypt

