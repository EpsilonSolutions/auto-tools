name := dse09
symmetric := asymmetric

BEGIN :: types
id := str
M := GT
C := list
D := list
mpk := list
msk := list
sk := list
ct := list
END :: types

BEGIN :: func:setup
input := None
g_G1 := random(G1)
g_G2 := random(G2)
w := random(ZR)
w_G1 := g_G1 ^ w
w_G2 := g_G2 ^ w
u := random(ZR)
u_G1 := g_G1 ^ u
u_G2 := g_G2 ^ u
h := random(ZR)
h_G1 := g_G1 ^ h
h_G2 := g_G2 ^ h
v := random(ZR)
v_G1 := g_G1 ^ v
v_G2 := g_G2 ^ v
v1 := random(ZR)
v1_G1 := g_G1 ^ v1
v1_G2 := g_G2 ^ v1
v2 := random(ZR)
v2_G1 := g_G1 ^ v2
v2_G2 := g_G2 ^ v2
a1 := random(ZR)
a2 := random(ZR)
b := random(ZR)
alpha := random(ZR)
gb_G1 := (g_G1^b)
gb_G2 := (g_G2^b)
ga1 := (g_G1^a1)
ga2 := (g_G1^a2)
gba1 := (gb_G1^a1)
gba2 := (gb_G1^a2)
tau1 := (v_G1 * (v1_G1^a1))
tau2 := (v_G1 * (v2_G1^a2))
tau1b := (tau1^b)
tau2b := (tau2^b)
egga := (e(g_G1,g_G2)^(alpha * (a1 * b)))
galpha := (g_G2^alpha)
galpha_a1 := (galpha^a1)
mpk := list{g_G1, g_G2, gb_G1, gb_G2, ga1, ga2, gba1, gba2, tau1, tau2, tau1b, tau2b, w_G1, w_G2, u_G1, u_G2, h_G1, h_G2, egga}
msk := list{galpha, galpha_a1, v_G1, v_G2, v1_G1, v1_G2, v2_G1, v2_G2, alpha}
output := list{mpk, msk}
END :: func:setup

BEGIN :: func:keygen
input := list{mpk, msk, id}
mpk := expand{g_G1, g_G2, gb_G1, gb_G2, ga1, ga2, gba1, gba2, tau1, tau2, tau1b, tau2b, w_G1, w_G2, u_G1, u_G2, h_G1, h_G2, egga}
msk := expand{galpha, galpha_a1, v_G1, v_G2, v1_G1, v1_G2, v2_G1, v2_G2, alpha}
r1 := random(ZR)
r2 := random(ZR)
z1 := random(ZR)
z2 := random(ZR)
tag_k := random(ZR)
r := (r1 + r2)
id_hash := H(id,ZR)
D#1 := (galpha_a1 * (v_G2^r))
D#2 := ((g_G2^-alpha) * ((v1_G2^r) * (g_G2^z1)))
D#3 := (gb_G2^-z1)
D#4 := ((v2_G2^r) * (g_G2^z2))
D#5 := (gb_G2^-z2)
D#6 := (gb_G2^r2)
D#7 := (g_G2^r1)
K := ((((u_G2^id_hash) * (w_G2^tag_k)) * h_G2)^r1)
sk := list{id, D, K, tag_k}
output := sk
END :: func:keygen

BEGIN :: func:encrypt
input := list{mpk, M, id}
mpk := expand{g_G1, g_G2, gb_G1, gb_G2, ga1, ga2, gba1, gba2, tau1, tau2, tau1b, tau2b, w_G1, w_G2, u_G1, u_G2, h_G1, h_G2, egga}
s1 := random(ZR)
s2 := random(ZR)
t := random(ZR)
tag_c := random(ZR)
s := (s1 + s2)
id_hash2 := H(id,ZR)
C#0 := (M * (egga^s2))
C#1 := (gb_G1^s)
C#2 := (gba1^s1)
C#3 := (ga1^s1)
C#4 := (gba2^s2)
C#5 := (ga2^s2)
C#6 := ((tau1^s1) * (tau2^s2))
C#7 := (((tau1b^s1) * (tau2b^s2)) * (w_G1^-t))
E1 := ((((u_G1^id_hash2) * (w_G1^tag_c)) * h_G1)^t)
E2 := (g_G1^t)
ct := list{C, E1, E2, tag_c}
output := ct
END :: func:encrypt

BEGIN :: func:decrypt
input := list{ct, sk}
sk := expand{id, D, K, tag_k}
ct := expand{C, E1, E2, tag_c}
tag := ((tag_c - tag_k)^-1)
A1 := (e(C#1,D#1) * (e(C#2,D#2) * (e(C#3,D#3) * (e(C#4,D#4) * e(C#5,D#5)))))
A2 := (e(C#6,D#6) * e(C#7,D#7))
A3 := (A1 / A2)
A4 := ((e(E1,D#7) / e(E2,K))^tag)
M := (C#0 / (A3 / A4))
output := M
END :: func:decrypt

