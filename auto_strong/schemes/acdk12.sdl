name := acdk12
setting := symmetric

BEGIN :: types
 m1 := ZR
 m2 := ZR
END :: types

BEGIN :: func:setup
input := list{None}
 G := random(G1)
 C := random(G1)
 F := random(G1)
 U1 := random(G1)
 U2 := random(G1)
 gk := list{G, C, F, U1, U2}
output := gk
END :: func:setup


BEGIN :: func:keygen
input := list{gk}
 gk := expand{G, C, F, U1, U2}
 V := random(G1)
 V1 := random(G1)
 V2 := random(G1)
 H := random(G1)
 a1 := random(ZR)
 a2 := random(ZR)
 b := random(ZR)
 alpha := random(ZR)
 rho := random(ZR)

 B := G ^ b
 A1 := G ^ a1
 A2 := G ^ a2
 B1 := (B ^ a1)
 B2 := (B ^ a2)
 R1 := (V * (V1 ^ a1))
 R2 := (V * (V2 ^ a2))
 W1 := R1 ^ b
 W2 := R2 ^ b
 X1 := G ^ rho
 X2 := G ^ ((alpha * a1 * b) / rho)
 K1 := G ^ alpha
 K2 := K1 ^ a1
 vk := list{B, A1, A2, B1, B2, R1, R2, W1, W2, V, V1, V2, H, X1, X2}
 sk := list{K1, K2}
output := list{vk, sk}
END :: func:keygen


BEGIN :: func:sign
input := list{gk, vk, sk, m1, m2}
 gk := expand{G, C, F, U1, U2}
 vk := expand{B, A1, A2, B1, B2, R1, R2, W1, W2, V, V1, V2, H, X1, X2}
 sk := expand{K1, K2}
 M1 := C ^ m1
 M2 := C ^ m2
 M3 := F ^ m1
 M4 := F ^ m2
 M5 := U1 ^ m1
 M6 := U2 ^ m2

 r1 := random(ZR)
 r2 := random(ZR)
 z1 := random(ZR)
 z2 := random(ZR)
 r := r1 + r2

 S0 := (M5 * M6 * H) ^ r1
 S1 := K2 * (V ^ r)
 S2 := ((K1 ^ -1) * (V1 ^ r) * (G ^ z1)) 
 S3 := B ^ -z1
 S4 := (V2 ^ r) * (G ^ z2)
 S5 := B ^ -z2
 S6 := B ^ r2
 S7 := G ^ r1
 M := list{M1, M2, M3, M4, M5, M6}
 sig := list{S0, S1, S2, S3, S4, S5, S6, S7}
output := list{M, sig}
END :: func:sign


BEGIN :: func:verify
input := list{vk, M, sig}
 vk := expand{B, A1, A2, B1, B2, R1, R2, W1, W2, V, V1, V2, H, X1, X2}
 M := expand{M1, M2, M3, M4, M5, M6}
 sig := expand{S0, S1, S2, S3, S4, S5, S6, S7}
 
BEGIN :: if
if {{ e(S7, (M5 * (M6 * H))) == e(G, S0) } and { ((e(S1, B) * (e(S2, B1) * e(S3, A1))) == (e(S6, R1) * e(S7, W1))) } and { (e(S1, B) * e(S4, B2) * e(S5, A2)) == ((e(S6, R2) * e(S7, W2)) * e(X1, X2)) } and { e(F, M1) == e(C, M3) } and { e(F, M2) == e(C, M4) } and { e(U1, M1) == e(C, M5) } and { e(U2, M2) == e(C, M6) }} 
   output := True
else
   output := False
END :: if
END :: func:verify

